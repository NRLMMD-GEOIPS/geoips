 | # # # Distribution Statement A. Approved for public release. Distribution unlimited.
 | # # #
 | # # # Author:
 | # # # Naval Research Laboratory, Marine Meteorology Division
 | # # #
 | # # # This program is free software: you can redistribute it and/or modify it under
 | # # # the terms of the NRLMMD License included with this program. This program is
 | # # # distributed WITHOUT ANY WARRANTY; without even the implied warranty of
 | # # # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the included license
 | # # # for more details. If you did not receive the license, for more information see:
 | # # # https://github.com/U-S-NRL-Marine-Meteorology-Division/

Version 1.12.2a0 (2024-02-19)
*****************************

* Enhancements

  * Initial Stage of the GeoIPS CLI
  * CLI Stage Two - new implementation of 'geoips run' and more args for 'geiops list'
  * Added log with emphasis function
* Bug fixes

  * Ensure that log.interactive works from plugins when imported independently.
  * Make add_log_level a callable class to fix AttributeErrors.
  * Remove inconsistent unit test test_log_interactive_non_geoips
  * Modify algorithm_interpolator_colormapper to only provide input xarray
  * Re-write Dockerfile to restore functionality (installing geoips/passing tests)
  * Fix product source_name duplicate entries bug
* Refactor

  * Make JSON Plugin Registries Readable
  * Modify create_plugin_registries to use argparse instead of sys.argv
* Testing Updates

  * Added all_product_families.yaml to test all available product families
* Breaking Changes

  * Updated GeoIPS CLI to fix breaking changes introduced by all_product_families

Breaking Changes
================

*From GEOIPS#474: 2024-04-08, Incoming Breaking Changes to the CLI*

While no breaking changes have been introduced yet, Branch #423, PR #433 Test All
Product Families introduced changes to how product plugins are stored in the registry,
which would break some portions of the CLI. Specifically, product plugins are no longer
registered via a (source_name, product_name) tuple combination. They are still accessed
via products.get_plugin(source_name, product_name), however under the hood they are
registered as unique names via ``source_name.product_name``. This was added to prevent
errors that possibly could occur if different products refered to the same source_name
in different files. This broke some functionality of the CLI in ``geoips_command.py``
and ``geiops_get.py``.

Files Modified for Updating the CLI:

::

    modified: geoips/commandline/geoips_command.py
    modified: geoips/commandline/geoips_get.py

Files Added / Modified for Branch 423-test-all-product-families

::

    modified:   geoips/create_plugin_registries.py
    modified:   geoips/interfaces/base.py
    modified:   geoips/interfaces/yaml_based/products.py
    modified:   geoips/plugin_registry.py
    modified:   geoips/plugins/modules/output_formatters/imagery_annotated.py
    modified:   geoips/plugins/modules/output_formatters/metadata_tc.py
    modified:   geoips/plugins/modules/procflows/config_based.py
    new file:   geoips/plugins/yaml/products/all_product_families.yaml
    modified:   geoips/plugins/yaml/products/amsr-e.yaml
    new file:   tests/scripts/order_based_all_product_families/alg.abi.infrared.sh
    new file:   tests/scripts/order_based_all_product_families/alg_cmap.abi.infrared.sh
    new file:   tests/scripts/order_based_all_product_families/alg_int_cmap.abi.infrared.sh
    new file:   tests/scripts/order_based_all_product_families/int.abi.infrared.sh
    new file:   tests/scripts/order_based_all_product_families/int_alg.abi.infrared.sh
    new file:   tests/scripts/order_based_all_product_families/int_alg_cmap.abi.infrared.sh
    new file:   tests/scripts/order_based_all_product_families/sect_xdict_out_form.smap-spd.wind.sh
    new file:   tests/scripts/order_based_all_product_families/unmodified_prd.smap-spd.winds.sh
    new file:   tests/scripts/order_based_all_product_families/unsect_xdict_area_out_form.smap-spd.winds.sh
    new file:   tests/scripts/order_based_all_product_families/unsect_xdict_out_form.smap-spd.winds.sh
    new file:   tests/scripts/order_based_all_product_families/xdict_out_form.smap-spd.winds.sh

Bug Fixes
=========

Fix product sub-plugins duplicate source name error
---------------------------------------------------

*From GEOIPS#428: 2024-2-6, source_name duplicate bug*

Currently, when the plugin registry is built, the key names associated with the
sub-products contained in a yaml file (for instance lets say smap-spd.yaml), are
gathered via the sub-products source name rather than the name of the product plugin
they reside in. In this case, all product plugins under the key name smap-spd, are
placed in that location because of their source name, not the attribute name, found
at the top level of smap-spd.yaml. This could cause issues with other products, as
found in issue *GEOIPS#423: 2024-1-17, create products for each possible product family*

This updates fixes this bug by changing the naming convention of product plugins stored
within the plugin registry. Instead of products -- <source_name> -- sub_product_name,
the keys are now formatted products -- <source_name>.<sub_product_name>, and duplicates
are checked on that level.

Files modified (excluding files which were modified for black formatting):

::

    modified: geoips/create_plugin_registries.py
    modified: geoips/interfaces/base.py
    modified: geoips/interfaces/yaml_based/products.py
    modified: geoips/dev/output_config.py
    modified: geoips/plugins/modules/filename_formatters/tc_file_naming.py
    modified: geoips/plugins/modules/output_formatters/imagery_annotated.py
    modified: geoips/plugins/modules/output_formatters/metadata_tc.py
    modified: geoips/plugins/modules/procflows/config_based.py
    modified: geoips/plugins/modules/procflows/single_source.py

algorithm_interpolator_colormapper incorrectly interpolates data
----------------------------------------------------------------

This was found during the development for the GLM reader. Apparently, at line 1033 of
single_source.py procflow, when trying to interpolate data under the
algorithm_interpolator_colormapper family, we call 'interp_plugin' with the same
input and output xarray. This makes no sense, and needs to be fixed. It wasn't changing
the data in this format. To fix it, we leave input_xarray as 'alg_xarray', and set
output_xarray to 'None'. This is handled properly in the interpolator, and will modify
coordinate arrays to fit the shape of the interpolated data. I've checked config_based,
and this doesn't occur for that procflow.

::

    modified: geoips/geoips/plugins/modules/procflows/single_source.py

Make add_log_level a callable class, ensure log.interactive works consistently
------------------------------------------------------------------------------

*From GEOIPS#446: 2024-02-21, Move addition of interactive log level into __init__*
*From GEOIPS#446: 2024-02-21, Make add_log_level a callable class to fix AttributeErrors*

Remove call to ``add_log_level()`` from ``setup_logging()`` and into ``geoips/__init__.py``.
This makes ``log.interactive()`` available to all components of GeoIPS, regardless of how
they are accessed. Previously, if a plugin was used without the rest of GeoIPS (e.g. a
reader) it would raise an ``AttributeError`` if it called ``log.interactive()``.

This additionally makes add_log_level into a callable class called LogLevelAdder which must
be instantiated prior to use. This fixes a problem where AttributeErrors were raised from
time to time. The way that they occurred required them to be ignored, even when they were
useful. Now, only useful AttributeErrors should be raised.

::

    modified: geoips/__init__.py
    modified: geoips/commandline/log_setup.py
    added: tests/unit_tests/commandline/log_setup.py

Remove inconsistent unit test test_log_interactive_non_geoips
-------------------------------------------------------------

The recently added ``test_log_interactive_non_geoips`` unit test is inconsistent. It
sometimes successfully raises an ``AttributeError`` but not always. This is due to
GeoIPS polluting the ``logging`` class when adding new logging levels. The polluted
``logging`` class does not appear to be a problem, though, since it adds functionality
without impacting existing functionality. It appears safe to allow this pollution.

::

    modified: tests/unit_tests/commandline/log_setup.py

Remove unnessesary checks for and mentions of imagemagick
---------------------------------------------------------
..
  *From NRLMMD-GEOIPS/geoips#: YYYY-MM-DD, Removed unnecessary requirement for imagemagick*

In v1.11.3a0 imagemagick functionality was replaced with other libraries. As such,
imagemagick was no longder a dependancy. However, the installation docs, Dockerfile,
and setup scripts were not updated to reflect this change at the time. This fixes a
bug during installation where the user is forced to install imagemagick to pass tests
despite it no longer being used. It also updates the documentation accordingly.

::

    modified: Dockerfile
    modified: setup.sh
    modified: setup/check_system_requirements.sh
    modified: docs/source/starter/expert_installation.rst
    modified: docs/source/starter/mac_installation.rst


Add make to expert installation dependencies
--------------------------------------------
..
  *From NRLMMD-GEOIPS/geoips#454: 2024-03-15, Add make to expert installation dependencies*


`pypublicdecompwt` is a dependency of geoips. `make` is a dependency of `pypublicdecompwt`.
To install `pypublicdecompwt` you need `make`, but it's not listed as a dependency on
the expert installation instructions. It was added.

::

    modified: docs/source/starter/expert_installation.rst

Refactor
========

Modify create_plugin_registries to use argparse
-----------------------------------------------

*From issue GEOIPS#416: 2023-12-21, Replace create_plugin_registries 'sys.argv' calls with 'argparse' library'*

Currently create_plugin_registries.py uses sys.argv calls to generate its arguments
rather than argparse. This doesn't follow GeoIPS conventions nor that of the CLI that
will soon be updated. We should replace these calls with argparse architecture, so that
this code follows current conventions, as does other GeoIPS code.

::

    modified: geoips/geoips/create_plugin_registries.py

Make JSON Plugin Registries Readable
------------------------------------

*From GEOIPS#429: 2024-02-02, Plugin Registries Should Be Readable*

Currently, the JSON output of the plugin registries is a hodge-podge full of text. We
should refactor the way in which these plugin registries are outputted, so that they are
in a human readable, interpretable format. To do so, we need to add the argument
``indent=4`` to the ``json.dump`` call in ``write_plugin_registries``.

Enhancements
============

Added Log with Emphasis function
--------------------------------

Scattered throughout GeoIPS (and other packages too), are many Log statements that use
'***********************...' to emphasize the content in between them. While this is
easy to see in the Log output, it's extremely cluttered in the actual code. For this
reason, I've added a 'log_with_emphasis' function to handle this. All you need to do now
is 'log_with_emphasis(LOG.<log_type>, message)', and it will do the rest for you.

::

    modified: geoips/geoips/commandline/log_setup.py
    modified: geoips/geoips/interfaces/module_based/output_checkers.py
    modified: geoips/geoips/plugins/modules/output_checkers/geotiff.py
    modified: geoips/geoips/plugins/modules/output_checkers/image.py
    modified: geoips/geoips/plugins/modules/output_checkers/netcdf.py
    modified: geoips/geoips/plugins/modules/output_checkers/text.py
    modified: geoips/geoips/plugins/modules/procflows/single_source.py
    added: geoips/tests/unit_tests/commandline/log_setup.py

Initial Stage of the GeoIPS CLI
-------------------------------

*From GEOIPS#37: 2022-08-11, Create a useful CLI for GeoIPS.*

GeoIPS currently runs off of a few command scripts scattered throughout the code. The
only way a user could discover this is by reading the documentation, or looking through
the pyproject.toml to discover what scripts/commands are executable at the commandline.

To fix this, we are beginning to implement a new GeoIPS CLI, which will be called via
``geoips <command> <sub-command>``. This will allow the user to easily query and/or
execute geoips without having extensive knowledge of the lower-level implementations of
GeoIPS.

Currently, the GeoIPS CLI implements config, get, list, run, and validate commands. We
expect that we will change how ``run`` works, as well as add additional commands such as
``test``.

You can find more detailed information about each command at
``geoips/geoips/commandline/ancillary_info/cmd_instructions.yaml``. Below, we'll detail
to a minimal extent what each command does.

``geoips config`` implements configuration commands which are used to modify and/or
set up your GeoIPS environment. Currently, we implement installation methods for
downloading and decompressing test datasets. This is called via
``geoips config install <test_dataset_name>``.

``geoips get`` implements a variety of commands which retrieve additional information
about GeoIPS artifacts. Artifacts are a high level term for software pieces implemented
throughout GeoIPS. This includes individual plugins, interfaces, families, and top-level
packages.

``geoips list`` implements a variety of list methods which are used to detail what
artifacts exist throughout the GeoIPS Environment, or at a package specific level. We
currently support listing an individual interface, available interfaces, implemented
interfaces in a certain/all package[s], packages, scripts, and test-datasets.

``geoips run`` is an easy way to run a certain test script contained within a GeoIPS
package. These scripts must be placed in the ``<pkg_name>/tests/scripts`` directory and
be implemented via a ``*.sh`` bash script. This is an easier method to run your test
scripts opposed to traversing to the explicit directory and running the bash script
manually. We expect this command will change greatly as we continue to develop the CLI
and implement the order based procflow.

``geoips test`` implements a few methods to run testing scattered throughout GeoIPS
and other GeoIPS packages. It functions similar to run, but instead of being limited
to just executing normal test scripts, we can also run integration tests, liniting,
and unit tests. Since we expect ``geoips run`` to change in the future, we've
implemented this command to execute testing protocols for the foreseeable future.

``geoips validate`` implements a simple method of validating a certain plugin found
at the specified filepath. We expect this command will do more in the future, but for
the meantime, this command will validate the plugin using the associated interface
defined in the aforementioned plugin.

For an example of how to run the GeoIPS CLI, see the code section below.
.. code-block:: bash

    # Install the test_data_clavrx Test Dataset from CIRA's Nextcloud Instance
    geoips config install test_data_clavrx
    # All Interfaces GeoIPS and other GeoIPS Packages will be listed including all of
    # The plugin names that exist in that type of interface
    geoips list interface algorithms
    # Retrieve the 'single_channel' algorithm plugin and output information related
    # to it
    geoips get plugin algorithms single_channel
    # Will run the script under <script_name>.sh as it would execute ./<script_name>.sh
    # run_procflow command in the corresponding tests/scripts directory
    geoips run geoips abi.static.Infrared.imagery_annotated.sh
    # Example of how to validate a specific plugin
    geoips validate /home/evan/geoips/geoips_packages/geoips/geoips/plugins/yaml/products/abi.yaml

::

    modified: geoips/geoips/interfaces/base.py
    modified: geoips/pyproject.toml
    added: geoips/docs/source/userguide/command_line.rst
    added: geoips/geoips/commandline/ancillary_info/cmd_instructions.json
    added: geoips/geoips/commandline/ancillary_info/cmd_instructions.yaml
    added: geoips/geoips/commandline/commandline_interface.py
    added: geoips/geoips/commandline/geoips_command.py
    added: geoips/geoips/commandline/geoips_config.py
    added: geoips/geoips/commandline/geoips_get.py
    added: geoips/geoips/commandline/geoips_list.py
    added: geoips/geoips/commandline/geoips_run.py
    added: geoips/geoips/commandline/geoips_test.py
    added: geoips/geoips/commandline/geoips_validate.py
    added: geoips/tests/unit_tests/commandline/cli_top_level_tester.py
    added: geoips/tests/unit_tests/commandline/test_geoips_config_install.py
    added: geoips/tests/unit_tests/commandline/test_geoips_get_family.py
    added: geoips/tests/unit_tests/commandline/test_geoips_get_interface.py
    added: geoips/tests/unit_tests/commandline/test_geoips_get_package.py
    added: geoips/tests/unit_tests/commandline/test_geoips_get_plugin.py
    added: geoips/tests/unit_tests/commandline/test_geoips_list_interface.py
    added: geoips/tests/unit_tests/commandline/test_geoips_list_interfaces.py
    added: geoips/tests/unit_tests/commandline/test_geoips_list_packages.py
    added: geoips/tests/unit_tests/commandline/test_geoips_list_plugins.py
    added: geoips/tests/unit_tests/commandline/test_geoips_list_scripts.py
    added: geoips/tests/unit_tests/commandline/test_geoips_list_test_datasets.py
    added: geoips/tests/unit_tests/commandline/test_geoips_list_unit_tests.py
    added: geoips/tests/unit_tests/commandline/test_geoips_run.py
    added: geoips/tests/unit_tests/commandline/test_geoips_test_linting.py
    added: geoips/tests/unit_tests/commandline/test_geoips_test_script.py
    added: geoips/tests/unit_tests/commandline/test_geoips_test_unit_test.py
    added: geoips/tests/unit_tests/commandline/test_geoips_test_validate.py

CLI Stage Two
-------------

*From GEOIPS#455: 2024-03-21, CLI Stage Two*

With the addition of the GeoIPS CLI
(*From GEOIPS#37: 2022-08-11, Create a useful CLI for GeoIPS.*), we now have access to
a wide array of commands to interact with GeoIPS. The purpose of this PR is to enhance
the GeoIPS CLI with new and improved functionality. Specifically this PR addresses the
``geoips run`` command and adds additional arguments (``--columns, --long``) to
``geoips list`` commands.

``geoips run`` now invokes the same process as what ``run_procflow`` and
``data_fusion_procflow`` do. We've made this change to allow process workflow
functionality to become part of the CLI rather than a separate commandline entrypoint
that was hard to discover. Eventually, it would be nice to move all independent
commandline entrypoints onto the CLI. Such as ``create_plugin_registries``,
``create_sector_image``, etc. To use ``geoips run``, simply replace ``run_procflow``
or ``data_fusion_procflow`` with ``geoips run <specified_procflow>``, keeping the
remaining arguments the exact same. We have deprecated the use of the old procflow calls
and the ``--procflow <specified_procflow>`` flag as that information is now obtained by
the ``geoips run <specified_procflow>`` call. Below is an example of what a new
procflow script looks like:

::

    geoips run single_source $GEOIPS_TESTDATA_DIR/test_data_noaa_aws/data/goes16/20200918/1950/* \
        --reader_name abi_netcdf \
        --product_name Infrared \
        --compare_path "$GEOIPS_PACKAGES_DIR/geoips/tests/outputs/abi.static.<product>.imagery_annotated" \
        --output_formatter imagery_annotated \
        --filename_formatter geoips_fname \
        --resampled_read \
        --logging_level info \
        --sector_list goes_east

As stated above, we also added new optional arguments to all ``geoips list`` commands.
These arguments are shared and are only specified once via the ``GeoipsListCommon``
class. The two new optional arguments are ``--long`` and ``--columns <col_header> ...``.
``--long`` is the default for all ``geoips list`` commands and specifies that all
headers should be outputted. ``--columns <col_header> ...`` Specifies which columns
you'd like outputted via the ``geoips list`` command. For example, if we ran
``geoips list interface algorithms``, we'd get the ``--long`` format outputted. Running
``geoips list interface algorithms --columns package interface plugin_type relpath``
provides us table output with only those specified columns. Available columns differ
by list command.

Modified Files

::

    modified: geoips/commandline/ancillary_info/cmd_instructions.json
    modified: geoips/commandline/ancillary_info/cmd_instructions.yaml
    modified: geoips/commandline/args.py
    modified: geoips/commandline/commandline_interface.py
    modified: geoips/commandline/geoips_command.py
    modified: geoips/commandline/geoips_list.py
    modified: geoips/commandline/geoips_run.py
    modified: geoips/commandline/run_procflow.py
    modified: pyproject.toml
    modified: tests/scripts/abi.config_based_exclude_goes17.sh
    modified: tests/scripts/abi.config_based_output.sh
    modified: tests/scripts/abi.config_based_output_low_memory.sh
    modified: tests/scripts/abi.static.Infrared.imagery_annotated.sh
    modified: tests/scripts/abi.static.Visible.imagery_annotated.sh
    modified: tests/scripts/ahi.tc.WV.geotiff.sh
    modified: tests/scripts/amsr2.config_based_no_compare.sh
    modified: tests/scripts/amsr2.config_based_no_compare_full.sh
    modified: tests/scripts/amsr2.config_based_overlay_output.sh
    modified: tests/scripts/amsr2.config_based_overlay_output_low_memory.sh
    modified: tests/scripts/amsr2.tc.89H-Physical.imagery_annotated.sh
    modified: tests/scripts/amsr2_ocean.tc.windspeed.imagery_clean.sh
    modified: tests/scripts/amsub_mirs.tc.183-3H.imagery_annotated.sh
    modified: tests/scripts/ascat_knmi.tc.windbarbs.imagery_windbarbs_clean.sh
    modified: tests/scripts/ascat_low_knmi.tc.windbarbs.imagery_windbarbs.sh
    modified: tests/scripts/ascat_noaa_25km.tc.windbarbs.imagery_windbarbs.sh
    modified: tests/scripts/ascat_noaa_50km.tc.wind-ambiguities.imagery_windbarbs.sh
    modified: tests/scripts/ascat_uhr.tc.nrcs.imagery_clean.sh
    modified: tests/scripts/ascat_uhr.tc.wind-ambiguities.imagery_windbarbs.sh
    modified: tests/scripts/ascat_uhr.tc.windbarbs.imagery_windbarbs.sh
    modified: tests/scripts/ascat_uhr.tc.windspeed.imagery_clean.sh
    modified: tests/scripts/atms.tc.165H.netcdf_geoips.sh
    modified: tests/scripts/documentation_imagery.sh
    modified: tests/scripts/ewsg.static.Infrared.imagery_clean.sh
    modified: tests/scripts/gmi.tc.89pct.imagery_clean.sh
    modified: tests/scripts/hy2.tc.windspeed.imagery_annotated.sh
    modified: tests/scripts/imerg.tc.Rain.imagery_clean.sh
    modified: tests/scripts/mimic_coarse.static.TPW-CIMSS.imagery_annotated.sh
    modified: tests/scripts/mimic_fine.tc.TPW-PWAT.imagery_annotated.sh
    modified: tests/scripts/modis.Infrared.unprojected_image.sh
    modified: tests/scripts/oscat_knmi.tc.windbarbs.imagery_windbarbs.sh
    modified: tests/scripts/saphir.tc.183-3HNearest.imagery_annotated.sh
    modified: tests/scripts/sar.tc.nrcs.imagery_annotated.sh
    modified: tests/scripts/seviri.WV-Upper.unprojected_image.sh
    modified: tests/scripts/smap.tc.windspeed.imagery_clean.sh
    modified: tests/scripts/smap.unsectored.text_winds.sh
    modified: tests/scripts/smos.tc.sectored.text_winds.sh
    modified: tests/scripts/ssmi.tc.37pct.imagery_clean.sh
    modified: tests/scripts/ssmis.color91.unprojected_image.sh
    modified: tests/scripts/viirsclearnight.Night-Vis-IR-GeoIPS1.unprojected_image.sh
    modified: tests/scripts/viirsday.tc.Night-Vis-IR.imagery_annotated.sh
    modified: tests/scripts/viirsmoon.tc.Night-Vis-GeoIPS1.imagery_clean.sh
    modified: tests/unit_tests/commandline/test_geoips_list_interface.py
    modified: tests/unit_tests/commandline/test_geoips_list_packages.py
    modified: tests/unit_tests/commandline/test_geoips_list_scripts.py
    modified: tests/unit_tests/commandline/test_geoips_list_test_datasets.py
    modified: tests/unit_tests/commandline/test_geoips_list_unit_tests.py
    modified: tests/unit_tests/commandline/test_geoips_run.py
    modified: tests/unit_tests/commandline/test_geoips_test_script.py
    modified: geoips/plugin_registry.py

Testing Updates
===============

Create products for each possible product family handled by single_source procflow
----------------------------------------------------------------------------------

*From GEOIPS#423: 2024-1-17, Create products for each possible product family*

This update adds a new product ``all_product_families.yaml`` to the products interface.
This file provides every possible product family to test against ``single_source.py``
procflow plugin, as we need to understand which families work, and the process these
families follow throughout that code in order to implement a new procflow down the road,
called ``order_based.py`` procflow. By understanding the paths that these families take,
we set ourselves up for success in implementing that new procflow.

Files Added:

::

    added: geoips/plugins/yaml/products/all_product_families.yaml
    added: tests/scripts/order_based_all_product_families/*.sh

Note: See Bux Fix for duplicate source_names in product registry *GEOIPS#428*, for more
information on bug fixes made on this branch as well.
