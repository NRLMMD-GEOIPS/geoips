 | # # # Distribution Statement A. Approved for public release. Distribution unlimited.
 | # # #
 | # # # Author:
 | # # # Naval Research Laboratory, Marine Meteorology Division
 | # # #
 | # # # This program is free software: you can redistribute it and/or modify it under
 | # # # the terms of the NRLMMD License included with this program. This program is
 | # # # distributed WITHOUT ANY WARRANTY; without even the implied warranty of
 | # # # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the included license
 | # # # for more details. If you did not receive the license, for more information see:
 | # # # https://github.com/U-S-NRL-Marine-Meteorology-Division/

Version 1.12.2a0 (2024-02-21)
*****************************


* Bug fixes

  * Ensure that log.interactive works from plugins when imported independently.
  * Make add_log_level a callable class to fix AttributeErrors.
  * Modify algorithm_interpolator_colormapper to only provide input xarray
  * Re-write Dockerfile to restore functionality (installing geoips/passing tests)


* Refactor

  * Make JSON Plugin Registries Readable
  * Modify create_plugin_registries to use argparse instead of sys.argv

* Documentation

  * Update Schema Descriptions

Bug Fixes
=========

algorithm_interpolator_colormapper incorrectly interpolates data
----------------------------------------------------------------

This was found during the development for the GLM reader. Apparently, at line 1033 of
single_source.py procflow, when trying to interpolate data under the
algorithm_interpolator_colormapper family, we call 'interp_plugin' with the same
input and output xarray. This makes no sense, and needs to be fixed. It wasn't changing
the data in this format. To fix it, we leave input_xarray as 'alg_xarray', and set
output_xarray to 'None'. This is handled properly in the interpolator, and will modify
coordinate arrays to fit the shape of the interpolated data. I've checked config_based,
and this doesn't occur for that procflow.

::

    modified: geoips/geoips/plugins/modules/procflows/single_source.py

Make add_log_level a callable class, ensure log.interactive works consistently
------------------------------------------------------------------------------

*From GEOIPS#446: 2024-02-21, Move addition of interactive log level into __init__*
*From GEOIPS#446: 2024-02-21, Make add_log_level a callable class to fix AttributeErrors*

Remove call to ``add_log_level()`` from ``setup_logging()`` and into ``geoips/__init__.py``.
This makes ``log.interactive()`` available to all components of GeoIPS, regardless of how
they are accessed. Previously, if a plugin was used without the rest of GeoIPS (e.g. a
reader) it would raise an ``AttributeError`` if it called ``log.interactive()``.

This additionally makes add_log_level into a callable class called LogLevelAdder which must
be instantiated prior to use. This fixes a problem where AttributeErrors were raised from
time to time. The way that they occurred required them to be ignored, even when they were
useful. Now, only useful AttributeErrors should be raised.

::

    modified: geoips/__init__.py
    modified: geoips/commandline/log_setup.py
    added: tests/unit_tests/commandline/log_setup.py

Remove unnessesary checks for and mentions of imagemagick
---------------------------------------------------------
..
  *From NRLMMD-GEOIPS/geoips#: YYYY-MM-DD, Removed unnecessary requirement for imagemagick*

In v1.11.3a0 imagemagick functionality was replaced with other libraries. As such,
imagemagick was no longder a dependancy. However, the installation docs, Dockerfile,
and setup scripts were not updated to reflect this change at the time. This fixes a
bug during installation where the user is forced to install imagemagick to pass tests
despite it no longer being used. It also updates the documentation accordingly.

::

    modified: Dockerfile
    modified: setup.sh
    modified: setup/check_system_requirements.sh
    modified: docs/source/starter/expert_installation.rst
    modified: docs/source/starter/mac_installation.rst


Add make to expert installation dependencies
--------------------------------------------
..
  *From NRLMMD-GEOIPS/geoips#454: 2024-03-15, Add make to expert installation dependencies*


`pypublicdecompwt` is a dependency of geoips. `make` is a dependency of `pypublicdecompwt`.
To install `pypublicdecompwt` you need `make`, but it's not listed as a dependency on
the expert installation instructions. It was added.

::

    modified: docs/source/starter/expert_installation.rst

Refactor
========

Modify create_plugin_registries to use argparse
-----------------------------------------------

*From issue GEOIPS#416: 2023-12-21, Replace create_plugin_registries 'sys.argv' calls with 'argparse' library'*

Currently create_plugin_registries.py uses sys.argv calls to generate its arguments
rather than argparse. This doesn't follow GeoIPS conventions nor that of the CLI that
will soon be updated. We should replace these calls with argparse architecture, so that
this code follows current conventions, as does other GeoIPS code.

::

    modified: geoips/geoips/create_plugin_registries.py

Make JSON Plugin Registries Readable
------------------------------------

*From GEOIPS#429: 2024-02-02, Plugin Registries Should Be Readable*

Currently, the JSON output of the plugin registries is a hodge-podge full of text. We
should refactor the way in which these plugin registries are outputted, so that they are
in a human readable, interpretable format. To do so, we need to add the argument
``indent=4`` to the ``json.dump`` call in ``write_plugin_registries``.

::

    modified: geoips/create_plugin_registries.py

Documentation
=============

Update Schema Descriptions
--------------------------

*From GEOIPS#233: 2023-06-15, Provide Descriptions for Schema YAML Files*

Currently GeoIPS Schema Files have essentially no documentation on what these schemas
actually accomplish. There are some comments scattered throughout the code, but largely
these files have gone undocumented, leaving users without the proper knowledge of what
the plugin / family does as a whole, and the properties they encompass. This branch
adds top-level descriptions to each schema yaml file to provide the user with general
knowledge of what the schema accomplishes. A later PR will document every property
within the schema so that yaml files can be completely self-documenting.

Files Modified:

::

    modified: geoips/schema/bases/top.yaml
    modified: geoips/schema/product_defaults/algorithm.yaml
    modified: geoips/schema/product_defaults/algorithm_colormapper.yaml
    modified: geoips/schema/product_defaults/algorithm_interpolator_colormapper.yaml
    modified: geoips/schema/product_defaults/bases/algorithm.yaml
    modified: geoips/schema/product_defaults/bases/colormapper.yaml
    modified: geoips/schema/product_defaults/bases/coverage_checker.yaml
    modified: geoips/schema/product_defaults/bases/interpolator.yaml
    modified: geoips/schema/product_defaults/bases/unvalidated.yaml
    modified: geoips/schema/product_defaults/bases/windbarb_plotter.yaml
    modified: geoips/schema/product_defaults/interpolator.yaml
    modified: geoips/schema/product_defaults/interpolator_algorithm.yaml
    modified: geoips/schema/product_defaults/interpolator_algorithm_colormapper.yaml
    modified: geoips/schema/product_defaults/sectored_xarray_dict_to_output_format.yaml
    modified: geoips/schema/product_defaults/specs/algorithm.yaml
    modified: geoips/schema/product_defaults/specs/algorithm_colormapper.yaml
    modified: geoips/schema/product_defaults/specs/algorithm_interpolator_colormapper.yaml
    modified: geoips/schema/product_defaults/specs/interpolator.yaml
    modified: geoips/schema/product_defaults/specs/interpolator_algorithm.yaml
    modified: geoips/schema/product_defaults/specs/interpolator_algorithm_colormapper.yaml
    modified: geoips/schema/product_defaults/specs/xarray_dict_to_output_format.yaml
    modified: geoips/schema/product_defaults/unmodified.yaml
    modified: geoips/schema/product_defaults/unsectored_xarray_dict_area_to_output_format.yaml
    modified: geoips/schema/product_defaults/unsectored_xarray_dict_to_output_format.yaml
    modified: geoips/schema/product_defaults/xarray_dict_to_output_format.yaml
    modified: geoips/schema/products/algorithm.yaml
    modified: geoips/schema/products/algorithm_colormapper.yaml
    modified: geoips/schema/products/algorithm_interpolator_colormapper.yaml
    modified: geoips/schema/products/bases/product.yaml
    modified: geoips/schema/products/interpolator.yaml
    modified: geoips/schema/products/interpolator_algorithm.yaml
    modified: geoips/schema/products/interpolator_algorithm_colormapper.yaml
    modified: geoips/schema/products/list.yaml
    modified: geoips/schema/products/sectored_xarray_dict_area_to_output_format.yaml
    modified: geoips/schema/products/sectored_xarray_dict_to_output_format.yaml
    modified: geoips/schema/products/single.yaml
    modified: geoips/schema/products/unmodified.yaml
    modified: geoips/schema/products/unsectored_xarray_dict_area_to_output_format.yaml
    modified: geoips/schema/products/unsectored_xarray_dict_to_output_format.yaml
    modified: geoips/schema/products/xarray_dict_to_output_format.yaml
    modified: geoips/schema/sectors/generated.yaml
    modified: geoips/schema/sectors/metadata_families/atmosriver.yaml
    modified: geoips/schema/sectors/metadata_families/pyrocb.yaml
    modified: geoips/schema/sectors/metadata_families/static.yaml
    modified: geoips/schema/sectors/metadata_families/stitched.yaml
    modified: geoips/schema/sectors/metadata_families/tc.yaml
    modified: geoips/schema/sectors/metadata_families/volcano.yaml
    modified: geoips/schema/sectors/specs/area_definition.yaml
    modified: geoips/schema/sectors/specs/center.yaml
    modified: geoips/schema/sectors/static.yaml