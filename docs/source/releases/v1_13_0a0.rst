 | # # # Distribution Statement A. Approved for public release. Distribution unlimited.
 | # # #
 | # # # Author:
 | # # # Naval Research Laboratory, Marine Meteorology Division
 | # # #
 | # # # This program is free software: you can redistribute it and/or modify it under
 | # # # the terms of the NRLMMD License included with this program. This program is
 | # # # distributed WITHOUT ANY WARRANTY; without even the implied warranty of
 | # # # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the included license
 | # # # for more details. If you did not receive the license, for more information see:
 | # # # https://github.com/U-S-NRL-Marine-Meteorology-Division/

Version 1.13.0a0 (2024-04-24)
*****************************

* Enhancements

  * Initial Stage of the GeoIPS CLI
  * New Docs Structure + GitHub Actions
  * Update Plugins to Support Better Plotting Configurability

* Release Updates

  * Update update_this_release_note
  * Add v1_13_0a0.rst release note

* Bug fixes

  * Fix color table application in geotiff_standard output formatter

Enhancements
============

Update Plugins to Support Better Plotting Configurability
---------------------------------------------------------

*From GEOIPS#259: 2023-08-11, Update product/product_default schemas to allow for greater plotting configurability*
*From GEOIPS#147: 2023-04-05, Add support for label positioning*

This enhancement updates feature / gridline -annotator yaml plugins and imagery-based
module plugins to enhance the plotting configurability we can control as users within
GeoIPS. It adds quite a few new attributes which we can use to control our plotting
output. This includes:
* Background color for data over the map-portion of the image (feature_annotator)
* Background color for the frame-portion of the image (gridline_annotator)
* x label offset (gridline_annotator)
* y label offset (gridline_annotator)
* font family for labels (gridline_annotator)
* font style for labels ('italic', 'bold', etc.) (gridline_annotator)
* font weight for lablels (a numeric value in range 0-1000, 'ultralight', 'light',
  'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi',
  'bold', 'heavy', 'extra bold', 'black') (gridline_annotator)
* font size for labels (float or {'xx-small', 'x-small', 'small', 'medium', 'large',
  'x-large', 'xx-large'. Defaults to matplotlib.pyplot.rcParams['font.size'])
  (gridline_annotator)

To change the background of a frame, all you need to do is add a
``background: <mpl_color_name>`` property within your gridline_annotator plugin. To
modify the background color of the mapped portion of the image, you'll add the same
section to your feature_annotator.

To change the offset of the labels for applicable imagery outputs, all you need to do is
add an ``xpadding: <pixel_offset_int>`` and/or a ``ypadding: <pixel_offset_int>`` to the
``labels`` portion of your gridline annotator. Using this information, we will adjust
the offset of your tick labels to the desired position.

To modify the font-based aspects of labels, you can do any of the following:
* ``fontfamily: <font_name>``
* ``fontstyle: <style_name>``
* ``fontweight: <int_or_weight_name>``
* ``fontsize: <float_or_size_name> ``

For examples of these new features, look at ``feature_annotator: default_oldlace`` and
``gridline_annotator: default_palegreen``.

::

    modified: geoips/image_utils/maps.py
    modified: geoips/image_utils/mpl_utils.py
    modified: geoips/plugins/modules/output_formatters/full_disk_image.py
    modified: geoips/plugins/modules/output_formatters/imagery_annotated.py
    modified: geoips/plugins/modules/output_formatters/imagery_windbarbs.py
    modified: geoips/schema/feature_annotators/cartopy.yaml
    modified: geoips/schema/gridline_annotators/cartopy.yaml
    added: geoips/plugins/yaml/feature_annotators/default_oldlace.yaml
    added: geoips/plugins/yaml/gridline_annotators/default_palegreen.yaml
    added: tests/outputs/abi.static.Infrared.imagery_annotated_enhanced/20200918.195020.goes-16.abi.Infrared.goes_east.45p56.noaa.10p0.png
    added: tests/scripts/abi.static.Infrared.imagery_annotated_enhanced.sh

Initial Stage of the GeoIPS CLI
-------------------------------

*From GEOIPS#37: 2022-08-11, Create a useful CLI for GeoIPS.*

GeoIPS currently runs off of a few command scripts scattered throughout the code. The
only way a user could discover this is by reading the documentation, or looking through
the pyproject.toml to discover what scripts/commands are executable at the commandline.

To fix this, we are beginning to implement a new GeoIPS CLI, which will be called via
``geoips <command> <sub-command>``. This will allow the user to easily query and/or
execute geoips without having extensive knowledge of the lower-level implementations of
GeoIPS.

Currently, the GeoIPS CLI implements config, get, list, run, and validate commands. We
expect that we will change how ``run`` works, as well as add additional commands such as
``test``.

You can find more detailed information about each command at
``geoips/geoips/commandline/ancillary_info/cmd_instructions.yaml``. Below, we'll detail
to a minimal extent what each command does.

``geoips config`` implements configuration commands which are used to modify and/or
set up your GeoIPS environment. Currently, we implement installation methods for
downloading and decompressing test datasets. This is called via
``geoips config install <test_dataset_name>``.

``geoips get`` implements a variety of commands which retrieve additional information
about GeoIPS artifacts. Artifacts are a high level term for software pieces implemented
throughout GeoIPS. This includes individual plugins, interfaces, families, and top-level
packages.

``geoips list`` implements a variety of list methods which are used to detail what
artifacts exist throughout the GeoIPS Environment, or at a package specific level. We
currently support listing an individual interface, available interfaces, implemented
interfaces in a certain/all package[s], packages, scripts, and test-datasets.

``geoips run`` is an easy way to run a certain test script contained within a GeoIPS
package. These scripts must be placed in the ``<pkg_name>/tests/scripts`` directory and
be implemented via a ``*.sh`` bash script. This is an easier method to run your test
scripts opposed to traversing to the explicit directory and running the bash script
manually. We expect this command will change greatly as we continue to develop the CLI
and implement the order based procflow.

``geoips test`` implements a few methods to run testing scattered throughout GeoIPS
and other GeoIPS packages. It functions similar to run, but instead of being limited
to just executing normal test scripts, we can also run integration tests, liniting,
and unit tests. Since we expect ``geoips run`` to change in the future, we've
implemented this command to execute testing protocols for the foreseeable future.

``geoips validate`` implements a simple method of validating a certain plugin found
at the specified filepath. We expect this command will do more in the future, but for
the meantime, this command will validate the plugin using the associated interface
defined in the aforementioned plugin.

For an example of how to run the GeoIPS CLI, see the code section below.
.. code-block:: bash

    # Install the test_data_clavrx Test Dataset from CIRA's Nextcloud Instance
    geoips config install test_data_clavrx
    # All Interfaces GeoIPS and other GeoIPS Packages will be listed including all of
    # The plugin names that exist in that type of interface
    geoips list interface algorithms
    # Retrieve the 'single_channel' algorithm plugin and output information related
    # to it
    geoips get plugin algorithms single_channel
    # Will run the script under <script_name>.sh as it would execute ./<script_name>.sh
    # run_procflow command in the corresponding tests/scripts directory
    geoips run geoips abi.static.Infrared.imagery_annotated.sh
    # Example of how to validate a specific plugin
    geoips validate /home/evan/geoips/geoips_packages/geoips/geoips/plugins/yaml/products/abi.yaml

::

    modified: geoips/geoips/interfaces/base.py
    modified: geoips/.gitignore
    modified: geoips/pyproject.toml
    added: geoips/docs/source/userguide/command_line.rst
    added: geoips/geoips/commandline/ancillary_info/cmd_instructions.json
    added: geoips/geoips/commandline/ancillary_info/cmd_instructions.yaml
    added: geoips/geoips/commandline/commandline_interface.py
    added: geoips/geoips/commandline/geoips_command.py
    added: geoips/geoips/commandline/geoips_config.py
    added: geoips/geoips/commandline/geoips_get.py
    added: geoips/geoips/commandline/geoips_list.py
    added: geoips/geoips/commandline/geoips_run.py
    added: geoips/geoips/commandline/geoips_test.py
    added: geoips/geoips/commandline/geoips_validate.py
    added: geoips/tests/unit_tests/commandline/cli_top_level_tester.py
    added: geoips/tests/unit_tests/commandline/test_geoips_config_install.py
    added: geoips/tests/unit_tests/commandline/test_geoips_get_family.py
    added: geoips/tests/unit_tests/commandline/test_geoips_get_interface.py
    added: geoips/tests/unit_tests/commandline/test_geoips_get_package.py
    added: geoips/tests/unit_tests/commandline/test_geoips_get_plugin.py
    added: geoips/tests/unit_tests/commandline/test_geoips_list_interface.py
    added: geoips/tests/unit_tests/commandline/test_geoips_list_interfaces.py
    added: geoips/tests/unit_tests/commandline/test_geoips_list_packages.py
    added: geoips/tests/unit_tests/commandline/test_geoips_list_plugins.py
    added: geoips/tests/unit_tests/commandline/test_geoips_list_scripts.py
    added: geoips/tests/unit_tests/commandline/test_geoips_list_test_datasets.py
    added: geoips/tests/unit_tests/commandline/test_geoips_list_unit_tests.py
    added: geoips/tests/unit_tests/commandline/test_geoips_run.py
    added: geoips/tests/unit_tests/commandline/test_geoips_test_linting.py
    added: geoips/tests/unit_tests/commandline/test_geoips_test_script.py
    added: geoips/tests/unit_tests/commandline/test_geoips_test_unit_test.py
    added: geoips/tests/unit_tests/commandline/test_geoips_test_validate.py

New Docs Structure + GitHub Actions
-----------------------------------

Created a new folder, docs/new-docs, for updated documentation structure. A new doc8 linting action will only check the contents of this folder. Additionally, a new action ensures that the "old docs" (all other docs except docs/new-docs) remain unchanged. All new documentation should be added to new-docs. Development will now occur in new-docs rather than a feature branch. Added a banner to the documentation site to inform readers that the old docs are frozen and to link them to the new docs as a preview. Note that no new functionality has been added to GeoIPS.

Release Updates
===============

Update "update_this_release_note" to v1_13_0a0
----------------------------------------------

*From GEOIPS#506: 2024-04-24, update update_this_release_note to 1.13.0a0*

::

    modified: docs/source/releases/index.rst
    new file: docs/source/releases/v1_13_0a0.rst
    modified: update_this_release_note

Bug Fixes
=========

Fix color table application in geotiff_standard output formatter
----------------------------------------------------------------

Prior to rasterio version 1.3.10, the color table was applied correctly
after writing the array.  It appears this now needs to be done before the
array is written.

::

  modified: docs/source/releases/v1_13_0a0.rst
  modified: geoips/plugins/modules/output_formatters/geotiff_standard.py
  modified: pyproject.toml