name: geoips_cmd_instructions
instructions:
  geoips:
    help_str: "The GeoIPS Command Line Interface (CLI)."
    description: |
      The Geolocated Information Processing System (GeoIPS) CLI provides a set of
      commands for managing and using GeoIPS.  For a list of available commands, run
      `geoips --help`. Each subcommand has its own help text that can be accessed by
      running `geoips <subcommand> --help`. For example, to get help on the `geoips
      list` command, run `geoips list --help`.
    output_info:
      - N/A
  geoips_config:
    help_str: "Configure the geoips environment."
    description: |
      The `geoips config` command is used to configure the GeoIPS environment.
      This includes configuring GeoIPS' behavior (coming soon), installing required
      static datasets, and managing it's plugin registries.
    output_info:
      - Output related to config process that was run.
  geoips_config_install:
    help_str: "Install static datasets for use by certain algorithms or tests."
    description: |
      The `geoips config install` command installs static datasets required by GeoIPS.
      Some of these datasets are required for certain algorithms (e.g. LUTs for Rayleigh
      scattering correction). Others are test datasets for use with GeoIPS' integration
      tests.

      A list of available datasets can be obtained by running `geoips list
      test-datasets`.

      Data will be downloaded to `$GEOIPS_TESTDATA_DIR` by default. This can be
      overridden by providing a path via the `-o/--outdir` option.

      To install all available datasets, use `geoips config install all`. Note that this
      will require more than 100GB of space.
    output_info:
      - Not Applicable
  geoips_config_create-registries:
    help_str: "Create plugin registries for installed plugin packages."
    description: |
      The `geoips config create-registries` command creates plugin registries for plugin
      packages found in the specified namespace.

      ** This should not be required unless the user has disabled automatic registry
      generation. **

      When called, by default, `geoips config create-registries` will find all plugin
      packages installed in the `geoips` namespace and generate a plugin registry in
      json format for each. If a different namespace is desired, `-n/--namespace` may be
      provided to specify that namespace. A subset of the available packages can be
      operated on by providing `-p/--packages`. The format can be specified by passing
      `-s/--save_type`.
    output_info:
      - Not Applicable
  geoips_config_delete-registries:
    help_str: "Delete plugin registries for installed plugin packages."
    description: |
      Delete plugin registries for plugin packages found in the specified namespace.

      This should not be required unless the user has disabled automatic registry
      generation.

      When called, by default, `geoips config delete-registries` will find all plugin
      packages installed in the `geoips` namespace any plugin registries that it finds.
      If a different namespace is desired, `-n/--namespace` may be
      provided to specify that namespace. A subset of the available packages can be
      operated on by providing `-p/--packages`.
    usage_str: |
      To use, type `geoips config delete-registries -n <namespace> -p <packages>`.
    output_info:
      - Not Applicable
  geoips_describe:
    help_str: "Print detailed information about an individual GeoIPS artifact."
    description: |
      The `geoips describe` command prints detailed information about a specific GeoIPS
      artifact where an artifact can be a registered plugin package, a plugin interface,
      or a plugin.

      To get information on different types of artifacts, use the command forms below:
        - Plugin Packages: `geoips describe package <package_name>`
          For example, `geoips describe package geoips_clavrx` would return information
          on the `geoips_clavrx` package.
        - Interfaces: `geoips describe <interface_name>`
          For example, `geoips describe readers` would return information regarding the
          readers interface.
        - Plugins: `geoips describe <interface_name> <plugin_name>`
          For example, `geoips describe reader abi_netcdf` would retrun information
          regarding the `abi_netcdf` reader plugin.
    output_info:
      - Information related to the artifact that was retrieved.
  geoips_describe_interface: &geoips-describe-interface
    help_str: "Print detailed information about a specific GeoIPS artifact."
    description: |
      This command can be called in a few different ways to retreive different
      information.  If called with no arguments, this command will print detailed
      information about the specified plugin interface. If called with a plugin name, it
      will print detailed information about that specific plugin.
    output_info:
      - Docstring
      - Documentation Link (if applicable)
      - Family Name (if applicable)
      - Interface Name
      - Interface Type
      - Package Name (if applicable)
      - Relative Path
  geoips_describe_algorithms: *geoips-describe-interface
  geoips_describe_colormappers: *geoips-describe-interface
  geoips_describe_coverage-checkers: *geoips-describe-interface
  geoips_describe_databases: *geoips-describe-interface
  geoips_describe_filename-formatters: *geoips-describe-interface
  geoips_describe_interpolators: *geoips-describe-interface
  geoips_describe_output-checkers: *geoips-describe-interface
  geoips_describe_output-formatters: *geoips-describe-interface
  geoips_describe_procflows: *geoips-describe-interface
  geoips_describe_readers: *geoips-describe-interface
  geoips_describe_sector-adjusters: *geoips-describe-interface
  geoips_describe_sector-metadata-generators: *geoips-describe-interface
  geoips_describe_sector-spec-generators: *geoips-describe-interface
  geoips_describe_title-formatters: *geoips-describe-interface
  geoips_describe_feature-annotators: *geoips-describe-interface
  geoips_describe_gridline-annotators: *geoips-describe-interface
  geoips_describe_product-defaults: *geoips-describe-interface
  geoips_describe_products: *geoips-describe-interface
  geoips_describe_sectors: *geoips-describe-interface
  geoips_describe_workflows: *geoips-describe-interface
  # geoips_describe_family:
  #   help_str: |
  #     Retrieve the appropriate GeoIPS Family alongside descriptive information of
  #     that family. See output_info for each datum provided when this command is
  #     called. For a listing of available GeoIPS families, run:
  #     `geoips list interfaces`.
  #   usage_str: |
  #     To use, type `geoips describe family <interface_name> <family_name>`, where
  #     <interface_name> is a valid GeoIPS Interface and <family_name> is a supported
  #     family member of that interface.
  #   output_info:
  #     - Docstring
  #     - Family Name
  #     - Family Path
  #     - Interface Name
  #     - Interface Type
  #     - Required Args / Schema
  geoips_describe_interface: *geoips-describe-interface
  # geoips_describe_interface:
  #   help_str: |
  #     Retrieve the appropriate GeoIPS Interface alongside descriptive information of
  #     that interface. See output_info for each datum provided when this command is
  #     called. For a listing of available GeoIPS interfaces, run:
  #     `geoips list interfaces`.
  #   usage_str: |
  #     To use, type `geoips describe interface <interface_name>`, where
  #     <interface_name> is a valid GeoIPS Interface.
  #   output_info:
  #     - Absolute Path
  #     - Docstring
  #     - Documentation Link (If applicable)
  #     - Interface Name
  #     - Interface Type
  #     - Supported Families
  geoips_describe_package: *geoips-describe-interface
  # geoips_describe_plugin:
  #   help_str: |
  #     Retrieve the appropriate GeoIPS Plugin alongside descriptive information of
  #     that plugin. See output_info for each datum provided when this command is
  #     called. For a listing of available GeoIPS Plugins, run:
  #     `geoips list plugins`.
  #   usage_str: |
  #     To use, type `geoips describe plugin <interface_name> <plugin_name>`, where
  #     <interface_name> is a valid GeoIPS Interface and <plugin_name> is a valid plugin
  #     identifier that has been implemented in any installed GeoIPS package.
  #   output_info:
  #     - Docstring
  #     - Documentation Link (If applicable)
  #     - Family
  #     - Interface Name
  #     - Package
  #     - Relative Path
  #     - Plugin Specific Info (signature / source_names / available overrides)
  geoips_list:
    help_str: "Print a list of GeoIPS artifacts as a table of summary information."
    description: |
      The `geoips list` command prints a table containing a summary of GeoIPS
      artifacts. Which artifacts are listed is determined by the arguments provided to
      `geoips list`. Artifacts that can be listed include:
        - Installed plugin packages.
        - The plugin interfaces provided by GeoIPS.
        - All plugins registered to a particular interfaces.
        - Integration test scripts provided by the plugin packages (if available).
        - Static datasets available for download (see `geoips config install`).
        - Unit tests.
    # usage_str: |
    #   To use, type `geoips list <cmd> <sub-cmd>`.
    output_info:
      - Additional info related to the artifact[s] being listed.
  geoips_list_common:
    help_str: |
      Common optional arguments shared between list commands.
    usage_str: |
      This cannot be used by itself. It is just a framework to share arguments amongst
      similar commands.
    output_info:
      - N/A
  list_interface:
  geoips_list_interface: &list-single-interface
    help_str: ""
    description: |
      Prints a table containing a summary of a list of GeoIPS plugins registered to the
      specified interface. For more detailed information about a specific plugin, please
      use the `geoips describe` command.
    output_info:
      - Family
      - Interface Name
      - Interface Type
      - Package
      - Plugin Name
      - Relative Path
  geoips_list_algorithms: *list-single-interface
  geoips_list_colormappers: *list-single-interface
  geoips_list_coverage-checkers: *list-single-interface
  geoips_list_databases: *list-single-interface
  geoips_list_filename-formatters: *list-single-interface
  geoips_list_interpolators: *list-single-interface
  geoips_list_output-checkers: *list-single-interface
  geoips_list_output-formatters: *list-single-interface
  geoips_list_procflows: *list-single-interface
  geoips_list_readers: *list-single-interface
  geoips_list_sector-adjusters: *list-single-interface
  geoips_list_sector-metadata-generators: *list-single-interface
  geoips_list_sector-spec-generators: *list-single-interface
  geoips_list_title-formatters: *list-single-interface
  geoips_list_feature-annotators: *list-single-interface
  geoips_list_gridline-annotators: *list-single-interface
  geoips_list_product-defaults: *list-single-interface
  geoips_list_products: *list-single-interface
  geoips_list_sectors: *list-single-interface
  geoips_list_workflows: *list-single-interface
  geoips_list_interfaces:
    help_str: "Print a table containing a summary the available plugin interfaces."
    description: |
      Print a table containing a summary of the available GeoIPS plugin interfaces. For
      more detailed information about a specific interface, please use the `geoips
      describe` command.
    output_info:
      - Absolute Path
      - Docstring
      - Documentation Link (if applicable)
      - Interface Name
      - Interface Type
      - Package
      - Supported Families
  geoips_list_plugins:
    help_str: "List all registered plugins for GeoIPS."
    description: |
      Print a table containing a summary of all registered plugins for GeoIPS. For more
      detailed information about a specific plugin, please use the `geoips describe` command.
    output_info:
      - Family
      - Interface Name
      - Interface Type
      - Package
      - Plugin Name
      - Relative Path
  geoips_list_packages:
    help_str: "List all installed GeoIPS plugin packages."
    description: |
      Print a table containing a summary of all installed GeoIPS plugin packages.
      By default, the table will include the package name, the absolute path to the
      package, and the top-level docstring from the package.
    output_info:
      - Docstring
      - Package
      - Relative Path
      - Version Number
  geoips_list_scripts:
    help_str: "List test scripts found in GeoIPS packages."
    output_info:
      - Package
      - Script Name
  geoips_list_registries:
    help_str: "List the plugin registries and their locations."
    output_info:
      - GeoIPS Package
      - JSON Path
      - YAML Path
  geoips_list_source-names:
    help_str: "List the data source names supported by GeoIPS readers."
    description: |
      Print a table containing a list of the data sources supported by GeoIPS readers.
      This table will include the names of the supported data sources and the names of
      the readers that support them.
    output_info:
      - Source Name
      - Reader Names
  geoips_list_test-datasets:
    help_str: "List the test datasets available for use with GeoIPS."
    description: |
      Print a table containing a list of the test datasets available for use with
      GeoIPS.  This table will include the dataset name, the data host where the dataset
      is located, and the path to the dataset.
    output_info:
      - Data Host
      - Dataset Name
  geoips_list_unit-tests:
    help_str: "List the unit tests from a GeoIPS package."
    description: |
      Print a table containing a list of the unit tests available in a GeoIPS package.
      This data can be used to run unit tests via `geoips test unit-test ...`.
    usage_str: |
      To use, type `geoips list unit-tests -p <package-name>`.
    output_info:
      - GeoIPS Package
      - Unit Test Directory
      - Unit Test Name
  geoips_run: &geoips-run
    help_str: "Run a GeoIPS procflow."
    description: |
      The `geoips run` command runs the specified procflow plugin. Currently availabe
      procflows include `single_source`, `config_based`, and `data_fusion` (if the
      data_fusion package is installed).
    usage_str: |
      To use, type `geoips run <procflow_name> **<procflow_arguments>`.
    output_info:
      - Log output of the specified procflow ran over certain products.
  geoips_run_config_based: *geoips-run
  geoips_run_data_fusion: *geoips-run
  geoips_run_single_source: *geoips-run
  # geoips_run_config_based:
  #   help_str: |
  #     Run the config based process workflow. For more information of the
  #     arguments available, either run 'geoips run config_basd -h', or view the arguments
  #     set up in geoips.commandline.args:add_args
  #   usage_str: |
  #     To use, type `geoips run data_fusion **<data_fusion_args>`.
  #   output_info:
  #     - Log Output of the Data Fusion Process Workflow (Procflow)
  # geoips_run_data_fusion:
  #   help_str: |
  #     Run the data fusion process workflow. This process workflow is built on top of the
  #     native 'single_source' procflow with extra arguments. For more information of the
  #     arguments available, either run 'geoips run data_fusion -h', or view the arguments
  #     set up in data_fusion.commandline.args:add_args
  #   usage_str: |
  #     To use, type `geoips run data_fusion **<data_fusion_args>`.
  #   output_info:
  #     - Log Output of the Data Fusion Process Workflow (Procflow)
  # geoips_run_single_source:
  #   help_str: |
  #     Run the native geoips single source process workflow. For more information of the
  #     arguments available, either run 'geoips run single_source -h', or view the
  #     arguments set up in geoips.commandline.args:add_args
  #   usage_str: |
  #     To use, type `geoips run single_source **<single_source_args>`.
  #   output_info:
  #     - Log Output of the Single Source Process Workflow (Procflow)
  geoips_test:
    help_str: "Run lint, unit, or integration tests."
    description: |
      Run tests implemented in GeoIPS or a separate GeoIPS Package. This could be
      running a set of linters on a specific package, running a certain integration or
      normal test script, or running unit tests. Current options are ["linting",
      "script", "unit-test"].
    usage_str: |
      To use, type `geoips test <cmd> <sub-cmd>`.
    output_info:
      - Output of the Test Being Ran
  geoips_test_linting:
    help_str: |
      Run all GeoIPS linters on a specific GeoIPS Package. This will test whether or not
      the code you wrote adheres to the specified coding conventions set up by GeoIPS.
      Defaults to the 'geoips' package.
    usage_str: |
      To use, type `geoips test linting -p <package-name>`.
    output_info:
      - Output of the Linters
  geoips_test_script:
    help_str: |
      Runs a specific test script (integration-based or normal), found within a certain
      GeoIPS package. If this is specified as an integration test, this will only work
      using the 'geoips' package. Use '--integration' to specify that the script
      is integration-based. Defaults to the 'geoips' package.
    usage_str: |
      To use, type `geoips test script -p <package-name> <--integration> <script_name>`.
    output_info:
      - Output of the Script Being Ran
  geoips_test_sector:
    help_str: |
      Create a specific sector image from the provided sector plugin name. This is an
      easy way to test whether or not the sector plugin you've created matches the
      region of the globe you want to study at the correct resolution. Provided this
      sector plugin has been added to the plugin registry, this command will work.

      If '--overlay' is supplied, your sector will be overlaid on top of the
      'global_cylindrical' grid in a semi-transparent fashion. Useful for testing the
      geospatial domain of very small sectors.
    usage_str: |
      To use, type `geoips test sector <sector_name> --overlay --outdir
      <output_directory_path>`.
    output_info:
      - A path to the image of the sector you've created.
  # geoips_test_unit-test:
  #   help_str: |
  #     Run tests unit-test[s] implemented in a certain GeoIPS package. This command
  #     expects that the unit tests implemented are pytest-based. Defaults to the
  #     'geoips' package.
  #   usage_str: |
  #     To use, type
  #     `geoips test unit-test -p <package-name> <directory_name> <-n> <script_name>`
  #   output_info:
  #     - Output of the Unit Test Being Ran
  geoips_tree:
    help_str: "Print a tree of all available GeoIPS CLI commands."
    description: |
      Print a tree of all of the available GeoIPS CLI commands. This will display every
      command in a top-down tree which gives a visual structure of how the CLI can be
      ran. <--max-depth> must be greater than or equal to 0, where depth denotes the
      level of the command you'd like to display. Ie. <0> geoips <1> list <2> scripts.
    usage_str: |
      To use, type `geoips tree <--max-depth> <int> <--color> <--short-name>`.
    output_info:
      - The tree of available GeoIPS CLI commands up to '--max-depth' levels, where
        depth denotes the level of the command you'd like to display.
        I.e. <0> geoips <1> list <2> scripts.
        Can be colored output if wanted and can define whether or not we want the full
        command string or just the name of the command at the specified depth.
  geoips_validate:
    help_str: "Validate a GeoIPS plugin."
    description: |
      Validate a GeoIPS Plugin found at <file_path>. While this is done under the hood
      via GeoIPS, this is an easy way to test whether or not the plugin you are
      developing is valid. If the <file_path> you're trying to validate is a
      multi-document YAML file, you'll also need to provide the name of the plugin
      within that file for this command to work.
    usage_str: |
      To use, type `geoips validate <file_path> OPT_ARG <plugin_name>`.
    output_info:
      - A message telling you if the plugin is valid or not and why.
