name: Pytest Short Unit Tests Pull Request

defaults:
  run:
    shell: bash

env:
  CONDA_ENV: pytest-${{ github.run_id }}-${{ github.run_attempt }}

# Can not use variables in the list of branches,
# GitHub Actions will not recognize, and workflow will not run.
on:
  # Triggers the workflow when pull request created and updated
  pull_request:
    branches:
      - main
  # Allows run of this workflow manually from the Actions tab
  # Must be merged to default before it will be available to manually run.
  workflow_dispatch:

# conda command to install all the required libraries for installing geoips
# and geoips dependencies
#   openblas required for scipy
#   gcc/gxx required for akima/recenter_tc
# conda create -y -n github_actions -c conda-forge gcc gxx openblas
jobs:
  run_short_unit_tests:
    runs-on: ${{ vars.RUNNER }}
    # GEOIPS_TESTDATA_DIR is required for an interactive log unit test.
    # ABI test dataset used in that unit test.
    env:
      GEOIPS_TESTDATA_DIR: ${{ vars.GEOIPS_TESTDATA_DIR }}
    steps:
      - name: Setup Python
        uses: actions/setup-python@v4 # v4is the latest for setup-python
        with:
          python-version: "pypy-3.10"  # I believe 3.10 is the latest for actions
          check-latest: true
      - name: Update pip
        run: pip install --upgrade pip
      - name: Checkout geoips repo default branch
        uses: actions/checkout@v3 # v3 is the latest for checkout
        with:
          fetch-depth: 0
          repository: ${{ vars.ORGANIZATION }}/geoips
          ref: ${{ vars.DEFAULT_BRANCH }}
          token: ${{ secrets.GEOIPS_TOKEN }}
          path: geoips_default_branch
      - name: pip install geoips_default_branch[test]
        run: |
          echo "which pip"
          which pip
          echo "pip uninstall -y geoips"
          pip uninstall -y geoips
          echo "pip install $PWD/geoips_default_branch[test]"
          pip install $PWD/geoips_default_branch[test]
          ret=$?
          echo "${ret}"
      - name: Checkout current repo default branch
        uses: actions/checkout@v3 # v3 is the latest for checkout
        with:
          fetch-depth: 0
          path: geoips_plugin_repo
      - name: pip install geoips plugin repo
        run: |
          echo "which pip"
          which pip
          curr_repo=`echo "$GITHUB_REPOSITORY" | sed "s,$GITHUB_REPOSITORY_OWNER/,,"`
          echo "pip uninstall -y $curr_repo"
          pip uninstall -y $curr_repo
          echo "pip install -v $PWD/geoips_plugin_repo"
          pip install -v $PWD/geoips_plugin_repo
          ret=$?
          echo "${ret}"
      - name: create_plugin_registries
        run: |
          echo "which create_plugin_registries"
          which create_plugin_registries
          echo "create_plugin_registries"
          create_plugin_registries
          ret=$?
          echo "${ret}"
      - name: Run plugin repo pytest unit tests
        run: |
          echo "::group::pytest_unit_test"
          echo "Pytest short unit tests of code ${PWD}/geoips_plugin_repo"
          echo "which pytest"
          which pytest
          curr_repo=`echo "$GITHUB_REPOSITORY" | sed "s,$GITHUB_REPOSITORY_OWNER/,,"`
          if [[ -d $PWD/geoips_plugin_repo/tests/unit_tests ]]; then
            # If we are testing a different plugin repo, use the dev version
            # of check_code.sh
            echo "pytest -q $PWD/geoips_plugin_repo/tests/unit_tests"
            pytest -q $PWD/geoips_plugin_repo/tests/unit_tests
            ret=$?
            echo "Return code: ${ret}"
            echo "::endgroup::"
            if [[ "${ret}" != *"0"* ]]; then
              echo "::error::due to plugin repo pytest errors, return code ${ret}"
              exit 1
            fi
          else
            echo "No pytests found for plugin repo"
          fi
      - name: Run geoips repo pytest unit tests
        run: |
          echo "::group::pytest_unit_test"
          echo "Pytest short unit tests of code ${PWD}/geoips_default_branch"
          echo "which pytest"
          which pytest
          curr_repo=`echo "$GITHUB_REPOSITORY" | sed "s,$GITHUB_REPOSITORY_OWNER/,,"`
          # If we are testing a plugin repo (not geoips), then we will run pytest
          # on the current code. If this is the geoips repo, then we already tested
          # above.
          if [[ "$curr_repo" != "geoips" ]]; then
            echo "pytest -q $PWD/geoips_default_branch/tests/unit_tests"
            pytest -q $PWD/geoips_default_branch/tests/unit_tests
            ret=$?
            echo "Return code: ${ret}"
            echo "::endgroup::"
            if [[ "${ret}" != *"0"* ]]; then
              echo "::error::due to geoips repo pytest errors, return code ${ret}"
              exit 1
            fi
          else
            echo "Do not run unit tests twice for geoips repo."
          fi
