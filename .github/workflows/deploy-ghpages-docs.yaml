name: Build and deploy docs

defaults:
  run:
    shell: bash

env:
  CONDA_ENV: build_deploy_docs-${{ github.run_id }}-${{ github.run_attempt }}

on:
  # Allows run of this workflow manually from the Actions tab
  # Must be merged to dev before it will be available to manually run.
  workflow_dispatch:
  # Run on each published release
  release:
    types: [published]

jobs:
  deploy_ghpages:
    runs-on: ${{ vars.RUNNER }}
    steps:
      - name: Setup Python
        uses: actions/setup-python@v4 # v4is the latest for setup-python
        with:
          python-version: "pypy-3.10"  # I believe 3.10 is the latest for actions
          check-latest: true
      - name: Update pip
        run: pip install --upgrade pip
      - name: Checkout geoips repo default branch
        uses: actions/checkout@v3 # v3 is the latest for checkout
        with:
          fetch-depth: 0
          repository: ${{ vars.ORGANIZATION }}/geoips
          ref: ${{ vars.DEFAULT_BRANCH }}
          token: ${{ secrets.GEOIPS_TOKEN }}
          path: geoips_default_branch
      - name: pip install geoips_default_branch[doc]
        run: |
          which pip
          pip uninstall -y geoips
          pip install $PWD/geoips_default_branch[doc]
          ret=$?
          echo "${ret}"
          python -c "import geoips; print(geoips.__version__)"
      - name: Checkout current repo current branch
        uses: actions/checkout@v3 # v3 is the latest for checkout
        with:
          fetch-depth: 0
          path: geoips_plugin_repo
      - name: pip install geoips plugin repo
        run: |
          which pip
          curr_repo=`echo "$GITHUB_REPOSITORY" | sed "s,$GITHUB_REPOSITORY_OWNER/,,"`
          # Do not re-install if this is the geoips repo
          if [[ "$curr_repo" != "geoips" ]]; then
              pip uninstall -y $curr_repo
              pip install -v $PWD/geoips_plugin_repo
              ret=$?
              echo "${ret}"
              python -c "import $curr_repo; print($curr_repo.__version__)"
          fi
      - name: create_plugin_registries
        run: |
          echo "create plugin registries"
          which create_plugin_registries
          create_plugin_registries
          ret=$?
          echo "${ret}"
      - name: Run build docs
        run: |
          which pip
          echo "Build html and pdf docs"
          # Ie, get 'recenter_tc' out of 'NRLMMD-GEOIPS/recenter_tc'
          curr_repo=`echo "$GITHUB_REPOSITORY" | sed "s,$GITHUB_REPOSITORY_OWNER/,,"`
          # Call build_docs.sh from the geoips default branch
          # Pass in
          #   the path to the current plugin repo,
          #   the name of the current repo,
          #   "html_pdf" to indicate producing both html and pdf output, and
          #   the path to the docs template directory in the geoips default branch.
          ./geoips_default_branch/docs/build_docs.sh ./geoips_plugin_repo $curr_repo html_pdf ./geoips_default_branch/docs
          ret=$?
          if [[ "${ret##*:}" != *"0"* ]]; then
            echo "::error::Building html and pdf docs ${ret##*:}"
            exit 1
          fi
      - name: Run deploy docs
        run: |
          which pip
          echo "Deploy docs to github pages"
          # GITHUB_REPOSITORY, GITHUB_REPOSITORY_OWNER, and GITHUB_SERVER_URL are all
          # standard github variables defined for every github actions run.
          # Ie, get 'recenter_tc' out of 'NRLMMD-GEOIPS/recenter_tc'
          curr_repo=`echo "$GITHUB_REPOSITORY" | sed "s,$GITHUB_REPOSITORY_OWNER/,,"`
          # ie, https://github.com/NRLMMD-GEOIPS
          GEOIPS_REPO_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY_OWNER"
          # Remove ghpages_repo dir if it exists.
          # deploy_pages.sh will not run if ghpages_repo exists.
          if [[ -d ./ghpages_repo ]]; then
              echo "::group::remove_ghpages_before"
              echo "Remove ghpages_repo before deploy"
              echo "rm -rfv ./ghpages_repo"
              rm -rfv ./ghpages_repo
              echo "::endgroup::"
              rmret=$?
              if [[ "${rmret##*:}" != *"0"* ]]; then
                echo "::error::Removing ./ghpages_repo before deploy ${rmret##*:}"
                exit 1
              fi
          fi
          # Use the deploy_pages.sh script from the geoips default branch.
          # Pass in the
          #   current plugin repo path,
          #   the geoips repo url, and
          #   a path to a new directory for the ghpages checkout/push
          #   the name of the current repository
          ./geoips_default_branch/docs/deploy_pages.sh ./geoips_plugin_repo $GEOIPS_REPO_URL ./ghpages_repo $curr_repo
          ret=$?
          if [[ "${ret##*:}" != *"0"* ]]; then
            echo "::error::Deploying docs to GitHub pages ${ret##*:}"
            exit 1
          fi
          # Remove ghpages_repo dir after running deploy_pages.sh.
          # deploy_pages.sh will not run if ghpages_repo exists.
          if [[ -d ./ghpages_repo ]]; then
              echo "::group::remove_ghpages_after"
              echo "Remove ghpages_repo after deploy"
              echo "rm -rfv ./ghpages_repo"
              rm -rfv ./ghpages_repo
              echo "::endgroup::"
              rmret=$?
              if [[ "${rmret##*:}" != *"0"* ]]; then
                echo "::error::Removing ./ghpages_repo after deploy ${rmret##*:}"
                exit 1
              fi
          fi
