name: "PR Complete"

on:
  pull_request:
    types: [opened, edited, reopened, synchronize]

jobs:
  All_checkboxes_checked:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Fetch PR body and validate checkboxes
        run: |
          # 1. Fetch the pull request body via GitHub API
          PR_BODY=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }} \
          | jq -r .body)

          echo "Pull Request Body:"
          echo "$PR_BODY"

          # 2. Look for any unchecked boxes ("[ ]")
          UNCHECKED=$(echo "$PR_BODY" | grep '\[ \]' || true)

          # 3. If any are found, fail the build
          if [ -n "$UNCHECKED" ]; then
            echo "Error: Found unchecked checkboxes:"
            echo "$UNCHECKED"
            exit 1
          else
            echo "All checkboxes appear to be checked!"
          fi
          name: Check Feature/Enhancement Files Require Docs
  Docs_added:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Install yq (for YAML parsing)
        run: |
          sudo apt-get update
          sudo apt-get install -y yq

      - name: Validate feature files and doc changes
        run: |
          # 1. Define the list of valid top-level keys that require documentation.
          KEYS=("feature" "enhancement" "deprecation")

          # 2. Get all changed files in this pull request (from base to current HEAD).
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} HEAD)

          # 3. Filter changed files for YAML in 'latest' and RST in 'docs/'.
          CHANGED_FEATURE_FILES=$(echo "${CHANGED_FILES}" | grep '^docs/source/releases/latest.*\.yaml$' || true)
          CHANGED_DOC_FILES=$(echo "${CHANGED_FILES}" | grep '^docs/.*\.rst$' || true)

          # 4. If no YAML files in 'latest' changed, we can exit successfully.
          if [ -z "${CHANGED_FEATURE_FILES}" ]; then
            echo "No YAML files in 'docs/source/releases/latest' were changed. Skipping doc check."
            exit 0
          fi

          # 5. For each changed YAML file in 'latest', check if it has *any* of the listed keys.
          for file in ${CHANGED_FEATURE_FILES}; do
            # We'll track if at least one required key is found in this file.
            KEY_FOUND=false

            for key in "${KEYS[@]}"; do
              # yq e ".<key>" will return null if the top-level key doesn't exist
              key_value=$(yq e ".${key}" "$file" 2>/dev/null || true)

              if [ "$key_value" != "null" ]; then
                KEY_FOUND=true
                break
              fi
            done

            # 6. If at least one of the keys was found, require .rst doc changes.
            if [ "$KEY_FOUND" = true ]; then
              if [ -z "${CHANGED_DOC_FILES}" ]; then
                echo "Error: The file '$file' has a top-level key from [${KEYS[*]}], but no .rst documentation was modified in 'docs/'."
                echo "Please update relevant .rst documentation in 'docs/' to document changes."
                exit 1
              fi
            fi
          done

          echo "All changed YAML files with required keys have associated documentation changes. âœ…"


