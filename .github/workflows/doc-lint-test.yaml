# Builds an image that contains GeoIPS built with `pip install .[doc,lint,test]`
name: Build Documentation, Lint, and Test

env:
  BASE_GEOIPS_PATH: /packages/geoips
  PLUGIN_BASE_IMAGE: ghcr.io/NRLMMD-GEOIPS/geoips:doclinttest-stable

defaults:
  run:
    shell: bash

on:
  # Triggers when code is pushed to "main" branch
  # This should only happen when PRs are merged
  push:
    branches:
      - main

  # Triggers the workflow when pull request created and updated
  pull_request:
    # Sequence of patterns matched against refs/heads
    branches:
      - main

  # Triggers when a new release is created
  release:
    types:
      - published

  # Allows run of this workflow manually from the Actions tab
  workflow_dispatch:


env:
  REGISTRY: ghcr.io

jobs:
  set_variables:
    runs-on: ${{ vars.RUNNER }}
    outputs:
      IMAGE_NAME: ${{ steps.set_image_name.outputs.IMAGE_NAME }}
    steps:
      - name: Set the image name
        id: set_image_name
        run: |
          image_name=${REGISTRY}/${GITHUB_REPOSITORY,,}
          echo "IMAGE_NAME=${image_name}" >> ${GITHUB_ENV}
          echo "IMAGE_NAME=${image_name}" >> ${GITHUB_OUTPUT}

  # Build the base GeoIPS doclinttest image
  # This image is used in all subsequent tests
  # It is only built for the main GeoIPS package but is used by all repositories
  #
  # Within this image, the GeoIPS package is located in /packages/geoips and is
  # installed using `pip install .[doc,lint,test]`. Scripts from geoips can be called
  # from /packages/geoips.
  build_doclinttest_image:
    runs-on: ${{ vars.RUNNER }}
    if: ${{ github.event.repository.name == 'geoips' }}
    env:
      IMAGE_NAME: ${{ needs.set_variables.outputs.IMAGE_NAME }}
    # Can't write to registry without this
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup BuildX
        uses: docker/setup-buildx-action@v3

      - name: Login to the Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_TOKEN }}

      # This cache allows the second push below when on the main branch
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and Push image
        uses: docker/build-push-action@v6
        with:
          context: .
          target: doclinttest
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.IMAGE_NAME }}:buildcache
          file: "Dockerfile"
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ env.IMAGE_NAME }}:buildcache,mode=max

      # This is used for building docs, linting, and testing other plugins
      - name: Push additional tag if on main branch
        if: github.ref == 'refs/heads/main'
        run: |
          docker tag ${IMAGE_NAME}:${GITHUB_SHA} ${IMAGE_NAME}:doclinttest
          docker push ${IMAGE_NAME}:doclinttest

#################################################
# Documentation builds
#################################################
  build_sphinx_html:
    runs-on: ${{ vars.RUNNER }}
    needs: build_doclinttest_image
    container:
      image: ${{ needs.build_doclinttest_image.outputs.IMAGE_NAME }}:${{ github.sha }}
      credentials:
        username: ${{ secrets.GHCR_USER }}
        password: ${{ secrets.GHCR_TOKEN }}
    env:
      CURR_REPO: ${{ github.event.repository.name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure Git safe directory
        run: git config --global --add safe.directory $PWD

      - name: Install geoips documentation packages
        run: pip install -e .[doc]

      - name: Run build html
        run: |
          echo "Build html docs"
          # Call build_docs.sh from the geoips default branch
          # Pass in
          #   the path to the current plugin repo,
          #   the name of the current repo,
          #   "html_only" to indicate producing only html output, and
          #   the path to the docs template directory in the geoips default branch.
          $BASE_GEOIPS_PATH/docs/build_docs.sh . $CURR_REPO html_only ./docs
          ret=$?
          if [[ "${ret##*:}" != *"0"* ]]; then
            echo "::error::Building html docs ${ret##*:}"
            exit 1
          fi

# This job does not currently work because latex is not installed in the image. I think
# that to get this job working would only require installing texlive-base but other
# texlive packages might also be required.
#
# Additionally, this job is extremely slow. Building the PDF documentation is time
# consuming and should probably only be run on releases. Building the HTML documentation
# should be enough to catch any problems that crop up.
#
#   build_sphinx_pdf:
#     runs-on: ${{ vars.RUNNER }}
#     needs: build_doclinttest_image
#     container:
#       image: ${{ needs.build_doclinttest_image.outputs.IMAGE_NAME }}:${{ github.sha }}
#       credentials:
#         username: ${{ secrets.GHCR_USER }}
#         password: ${{ secrets.GHCR_TOKEN }}
#     env:
#       CURR_REPO: ${{ github.event.repository.name }}
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#
#       - name: Configure Git safe directory
#         run: git config --global --add safe.directory $PWD
#
#       - name: Install geoips documentation packages
#         run: pip install -e .[doc]
#
#       - name: Run build pdf
#         run: |
#           echo "Build pdf docs"
#           # Call build_docs.sh from the geoips default branch
#           # Pass in
#           #   the path to the current plugin repo,
#           #   the name of the current repo,
#           #   "pdf_only" to indicate producing only pdf output, and
#           #   the path to the docs template directory in the geoips default branch.
#           ./docs/build_docs.sh . $CURR_REPO pdf_only ./docs
#           ret=$?
#           if [[ "${ret##*:}" != *"0"* ]]; then
#             echo "::error::Building pdf docs ${ret##*:}"
#             exit 1
#           fi

#################################################
# Linting
#################################################
  lint_bandit:
    runs-on: ${{ vars.RUNNER }}
    needs: build_doclinttest_image
    container:
      image: ${{ needs.build_doclinttest_image.outputs.IMAGE_NAME }}:${{ github.sha }}
      credentials:
        username: ${{ secrets.GHCR_USER }}
        password: ${{ secrets.GHCR_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run bandit
        shell: bash -l {0}
        run: |
          echo "::group::bandit_analysis"
          echo "BANDIT analysis of code"
          $BASE_GEOIPS_PATH/tests/utils/check_code.sh bandit ./
          ret=$?
          echo "Return code: ${ret}"
          echo "::endgroup::"
          if [[ "${ret}" != *"0"* ]]; then
            echo "::error::due to bandit violations, return code ${ret}"
            exit 1
          fi

  lint_doc8:
    runs-on: ${{ vars.RUNNER }}
    needs: build_doclinttest_image
    container:
      image: ${{ needs.build_doclinttest_image.outputs.IMAGE_NAME }}:${{ github.sha }}
      credentials:
        username: ${{ secrets.GHCR_USER }}
        password: ${{ secrets.GHCR_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run doc8
        shell: bash -l {0}
        run: |
          echo "::group::doc8_analysis"
          echo "Doc8 analysis of code"
          doc8 --max-line-length=120 ./docs/source/new-docs/
          ret=$?
          echo "Return code: ${ret}"
          echo "::endgroup::"
          if [[ "${ret}" != *"0"* ]]; then
            echo "::error::due to doc8 violations, return code ${ret}"
            exit 1
          fi

  lint_flake8:
    runs-on: ${{ vars.RUNNER }}
    needs: build_doclinttest_image
    container:
      image: ${{ needs.build_doclinttest_image.outputs.IMAGE_NAME }}:${{ github.sha }}
      credentials:
        username: ${{ secrets.GHCR_USER }}
        password: ${{ secrets.GHCR_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run flake8
        shell: bash -l {0}
        run: |
          echo "::group::flake8_analysis"
          echo "FLAKE8 analysis of code"
          $BASE_GEOIPS_PATH/tests/utils/check_code.sh flake8 .
          ret=$?
          echo "Return code: ${ret}"
          echo "::endgroup::"
          if [[ "${ret}" != *"0"* ]]; then
            echo "::error::due to flake8 violations, return code ${ret}"
            exit 1
          fi

  lint_black:
    runs-on: ${{ vars.RUNNER }}
    needs: build_doclinttest_image
    container:
      image: ${{ needs.build_doclinttest_image.outputs.IMAGE_NAME }}:${{ github.sha }}
      credentials:
        username: ${{ secrets.GHCR_USER }}
        password: ${{ secrets.GHCR_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run code check script black
        shell: bash -l {0}
        run: |
          echo "::group::black_analysis"
          echo "BLACK analysis of code"
          black --version
          $BASE_GEOIPS_PATH/tests/utils/check_code.sh black ./
          ret=$?
          echo "Return code: ${ret}"
          echo "::endgroup::"
          if [[ "${ret}" != *"0"* ]]; then
            echo "::error::due to black violations, return code ${ret}"
            exit 1
          fi

#################################################
# Code tests
#################################################
  test_interfaces:
    runs-on: ${{ vars.RUNNER }}
    needs: build_doclinttest_image
    container:
      image: ${{ needs.build_doclinttest_image.outputs.IMAGE_NAME }}:${{ github.sha }}
      credentials:
        username: ${{ secrets.GHCR_USER }}
        password: ${{ secrets.GHCR_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure Git safe directory
        run: git config --global --add safe.directory $PWD
      - name: Pip install package
        run: pip install -v .
      - name: create_plugin_registries
        run: create_plugin_registries
      - name: Run code check script interfaces
        run: |
          $BASE_GEOIPS_PATH/tests/utils/check_code.sh interfaces geoips
          ret=$?
          echo "::group::interface_analysis"
          echo "INTERFACES analysis of code"
          echo "${ret}"
          echo "::endgroup::"
          if [[ "${ret##*:}" != *"0"* ]]; then
            echo "::error::due to interface violations ${ret##*:}"
            exit 1
          fi

  test_pytest_short:
    runs-on: ${{ vars.RUNNER }}
    needs: build_doclinttest_image
    container:
      image: ${{ needs.build_doclinttest_image.outputs.IMAGE_NAME }}:${{ github.sha }}
      credentials:
        username: ${{ secrets.GHCR_USER }}
        password: ${{ secrets.GHCR_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure Git safe directory
        run: git config --global --add safe.directory $PWD
      - name: Pip install package
        run: pip install -v .
      - name: create_plugin_registries
        run: create_plugin_registries
      - name: Run pytest unit tests
        run: |
          echo "::group::pytest_unit_test"
          echo "Pytest short unit tests of code ${PWD}/geoips_default_branch"
          echo "which pytest"
          which pytest
          echo "pytest -q ./tests/unit_tests"
          pytest -q ./tests/unit_tests
          ret=$?
          echo "Return code: ${ret}"
          echo "::endgroup::"
          if [[ "${ret}" != *"0"* ]]; then
            echo "::error::due to geoips repo pytest errors, return code ${ret}"
            exit 1
          fi
