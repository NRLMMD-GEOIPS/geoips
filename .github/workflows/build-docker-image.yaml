name: Build Docker Image

defaults:
  run:
    shell: bash

on:
  # Triggers when code is pushed to "main" branch
  # This should only happen when PRs are merged
  push:
    branches:
      - main

  # Triggers the workflow when pull request created and updated
  pull_request:
    # Sequence of patterns matched against refs/heads
    branches:
      - main

  # Triggers when a new release is created
  release:
    types:
      - published

  # Allows run of this workflow manually from the Actions tab
  workflow_dispatch:


env:
  REGISTRY: ghcr.io
  TEST_TAG: geoips:test

jobs:
  build_docker_image:
    runs-on: ${{ vars.RUNNER }}
    # Can't write to registry without this
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup BuildX
        uses: docker/setup-buildx-action@v3

      - name: Make image name lower case
        run: |
          echo "IMAGE_NAME=${GITHUB_REPOSITORY,,}" >> ${GITHUB_ENV}

      - name: Build Docker Image
        run: docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}:${{ github.sha }} .

      - name: Save Docker image as tar file
        run: docker save -o image.tar ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar

  build_sphinx_html:
    runs-on: ${{ vars.RUNNER }}
    needs: build_docker_image
    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .

      - name: Load Docker Image
        run: docker load -i image.tar

      # # Include test dependencies to allow full documentation
      # - name: pip install geoips_default_branch[doc,test]
      #   run: |
      #     which pip
      #     pip uninstall -y geoips
      #     # Include test dependencies to allow full documentation
      #     pip install $PWD/geoips_default_branch[doc,test]
      #     ret=$?
      #     echo "${ret}"
      # - name: Checkout current repo current branch
      #   uses: actions/checkout@v3 # v3 is the latest for checkout
      #   with:
      #     fetch-depth: 0
      #     path: geoips_plugin_repo
      # - name: pip install geoips plugin repo
      #   run: |
      #     which pip
      #     curr_repo=`echo "$GITHUB_REPOSITORY" | sed "s,$GITHUB_REPOSITORY_OWNER/,,"`
      #     # We must reinstall even if this is the geoips repo, because we need to test
      #     # the current branch
      #     pip uninstall -y $curr_repo
      #     pip install -v $PWD/geoips_plugin_repo
      #     ret=$?
      #     echo "${ret}"
      # - name: create_plugin_registries
      #   run: |
      #     which create_plugin_registries
      #     create_plugin_registries
      #     ret=$?
      #     echo "${ret}"
      # - name: Run build html
      #   run: |
      #     echo "Build html docs"
      #     # Ie, get 'recenter_tc' out of 'NRLMMD-GEOIPS/recenter_tc'
      #     # using standard github actions variables
      #     curr_repo=`echo "$GITHUB_REPOSITORY" | sed "s,$GITHUB_REPOSITORY_OWNER/,,"`
      #     # Call build_docs.sh from the geoips default branch
      #     # Pass in
      #     #   the path to the current plugin repo,
      #     #   the name of the current repo,
      #     #   "html_only" to indicate producing only html output, and
      #     #   the path to the docs template directory in the geoips default branch.
      #     ./geoips_default_branch/docs/build_docs.sh ./geoips_plugin_repo $curr_repo html_only ./geoips_default_branch/docs
      #     ret=$?
      #     if [[ "${ret##*:}" != *"0"* ]]; then
      #       echo "::error::Building html docs ${ret##*:}"
      #       exit 1
      #     fi
