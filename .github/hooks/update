#!/bin/bash

script=$0
zero_commit="0000000000000000000000000000000000000000"

# 2022-08-12, updated this to only require one valid message
require_all_valid=0

# echo "script: $script"
# echo "PATH: $PATH"

# Do not traverse over commits that are already in the repository 
# (e.g. in a different branch) 
# This prevents funny errors if pre-receive hooks got enabled after some 
# commits got already in and then somebody tries to create a new branch 
# If this is unwanted behavior, just set the variable to empty

# I believe this will prevent EVERY commit from showing up in the first push to a new branch.
# Limiting to maximum of 1 commit was not the right answer - then the first group of commits
# pushed to a new branch would only include 1 of the group.
excludeExisting="--not --all" 
# excludeExisting="" 

retval=0

while read -r oldrev newrev refname; do
    echo ""
    echo "Enforcing Policies..."
    echo "refname: $refname"
    echo "oldrev: $oldrev"
    echo "newrev: $newrev"

    # Branch or tag got deleted, ignore the push
    [ "$newrev" = "$zero_commit" ] && retval=0 && continue

    # Calculate range for new branch/updated branch
    [ "$oldrev" = "$zero_commit" ] && range="$newrev $excludeExisting" || range="$oldrev..$newrev $excludeExisting"
    
    # regex="^.{0,120}\n\n(.|\n)*"
    # regex="/^.{0,120}\n\n.*/"
    firstline_regex="^.{0,120}$"
    issue_num_regex="GEOIPS/(.*)#(.*)"
    
    span=`git rev-list --no-merges ${range}`
    # echo "git rev-list --no-merges ${range}"
    # echo "span: $span"
    
    # which git
    # git rev-list --no-merges $range
    
    declare -i num_commits=0
    declare -i num_valid_commits=0


    for COMMIT in $span; do
        num_commits=$((num_commits+1))

        message=`git show --pretty=format:"%B" --no-patch $COMMIT`

        echo ""
        echo ""
        echo "[POLICY] CHECKING COMMIT: $COMMIT"
        echo "[POLICY] *****************************************"
        echo "$message" | sed -e 's/^/[POLICY] /'
        echo "[POLICY] *****************************************"
    
        # Make sure first line is <= 120 characters
        grep_output=`echo "$message" | head -n 1 | grep -oP $firstline_regex`
        if [[ -z $grep_output ]]; then
            firstline_retval=1
            echo "[POLICY] FAIL: FIRST LINE COMMIT MESSAGE > 120 CHARACTERS"
        else
            firstline_retval=0
            echo "[POLICY] PASS: First line commit message <= 120 characters"
        fi

        # IF more than one line, make sure second line is blank line
        num_lines=`echo "$message" | wc -l`
        second_line=`echo "$message" | head -n 2 | tail -n 1`
        if [[ "$num_lines" != "1" && "$second_line" != "" ]]; then
            secondline_retval=1
            echo "[POLICY] FAIL: SECOND LINE COMMIT MESSAGE NOT BLANK"
        elif [[ "$num_lines" == "1" ]]; then
            secondline_retval=0
            echo "[POLICY] PASS: One line commit message"
        else
            secondline_retval=0
            echo "[POLICY] PASS: Second line commit message is blank"
        fi

        grep_output=`echo "$message" | grep -oP $issue_num_regex`
        if [[ -z $grep_output ]]; then
            issue_retval=1
            echo "[POLICY] FAIL: COMMIT MESSAGE DOES NOT CONTAIN ISSUE ID"
        else
            issue_retval=0
            echo "[POLICY] PASS: Commit message contains issue id"
        fi
        if [[ "$issue_retval" == "0" && "$firstline_retval" == "0" && "$secondline_retval" == "0" ]]; then
            # echo "[POLICY] PASS: At least one correct commit message, allowing push"
            # echo "[POLICY] "
            num_valid_commits=$((num_valid_commits+1))
            if [[ "$require_all_valid" == "0" ]]; then
                retval=0
            fi
        elif [[ "$require_all_valid" == "1" ]]; then
            retval=1 
        fi
    done
done
if [[ "$retval" == "1" ]]; then
    echo "[POLICY] "
    echo "[POLICY] Please follow the commit message format specified here (including valid issue number):"
    echo "[POLICY]     https://chris.beams.io/posts/git-commit/"
    echo "[POLICY]     enforced first line regex: $firstline_regex"
    echo "[POLICY]     enforced second line blank (empty string)"
    echo "[POLICY]     enforced issue id regex: $issue_num_regex"
    echo "[POLICY] Example proper commit message:"
    echo "[POLICY] ***************************************************************************"
    echo "[POLICY] Commit message summary line followed by blank line"
    echo "[POLICY] "
    echo "[POLICY] Additional details, any number of lines, including markup"
    echo "[POLICY] Must include issue id somewhere within message"
    echo "[POLICY] * Check spelling!"
    echo "[POLICY] * Include \"GEOIPS/\" !)"
    echo "[POLICY] * Include \"#\" !)"
    echo "[POLICY] GEOIPS/<issue_repo_name>#<issue_num>"
    echo "[POLICY] ***************************************************************************"
    echo "[POLICY] "
    echo "[POLICY] To change previous commit message:"
    echo "[POLICY]     git commit --amend"
    echo "[POLICY] To change last $num_commits commit messages:"
    echo "[POLICY]     git rebase -i HEAD~$num_commits"
    echo "[POLICY]     # Replace 'pass' with 'reword' in prompt, then interactively correct each commit message"
    echo "[POLICY] "
else
    echo "[POLICY] "
    echo "[POLICY] PASS PUSH: $num_valid_commits OF $num_commits COMMIT MESSAGES WERE VALID allowing push"
    echo "[POLICY] "
fi
exit $retval
