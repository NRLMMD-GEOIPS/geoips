[tool.poetry]
# required ones
name = "geoips"                                          # geoips package available at the root of the project
version = "0.0.0"                                        # 0.0.0 will be auto-updated with poetry dynamic versioning!
description = "Geolocated Information Processing System"
authors = ["GeoIPS <geoips@nrlmry.navy.mil>"]

# optional ones
maintainers = ["GeoIPS <geoips@nrlmry.navy.mil>"]
#homepage = "set the url"   // optional
repository = "https://github.com/NRLMMD-GEOIPS/geoips" #optional
#documentation = "set the url"      // optional
#license = {file = "LICENSE"}   // required
readme = "README.md"
keywords = ["GeoIPS", "Poetry"]
packages = [
    { include = "geoips" },
] # not needed as tool.poetry.name is properly set already
classifiers = [ # // list of PyPI trove classifiers to describe the project
    "Programming Language :: Python :: 3",
]
include = ["**/*.txt", "**/*.py", "**/*.yaml"]

# uses current version .postN and not incrementing
[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
metadata = false # don't include local-version hash; date doesn't appear by deafult
style = "pep440" # pep440 is deafult; can rmeove later on; used for : keeping 0.0.8 as the default install until 0.0.9 is out
#style = "semver"
#tag-branch = "feature-poetry"
strict = false
pattern = "(?x)^((?P<epoch>\\d+)!)?(?P<base>\\d+(\\.\\d+)*)([-._]?((?P<stage>[a-zA-Z]+)[-._]?(?P<revision>\\d+)?))?(\\+(?P<tagged_metadata>.+))?$"

# NOTE: You must CREATE a _version.py file and commit it via git!
#     That file will have 0.0.0 as the version - which will get updated when
#     pip installed.
# FURTHER NOTE: pip install -e will actually NOT update _version.py.
#     if you must have a valid version in your local editable install (which
#     is typically not necessary), you can manually update _version.py
#     with the following steps:
#     > pip install poetry-dynamic-versioning
#     > poetry-dynamic-versioning
#     (those steps are called automatically when running pip install, but
#     NOT when running pip install -e)
[tool.poetry-dynamic-versioning.substitution]
files = ["*/_version.py"]

# This is where you would specify a pre-build script from pyproject.toml/poetry.
# [tool.poetry.build]
# generate-setup-file = false  # I have no idea what this does
# script = prebuild.py  # This gets called as a python script prior to running build steps

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"                          # object used to perform the build process

[tool.poetry.dependencies] # must download to run
# NOTE this setuptools dependency should be removed altogether once meson fortran builds are working
setuptools = "<70"     # Required for any fortran builds until meson working
python = ">=3.10.0"    # mandatory to declare the required python version
matplotlib = ">=3.7.0" # Base requirement works, version specific to test outputs
netcdf4 = "<1.7.0"    # Base requirement, netcdf 1.7.0 causes seg fault in ABI reader
numpy = "<2.0"         # Base requirement numpy 1.26.4 still works, 2.0 breaks numexpr
pyresample = "*"       # Base requirement Geospatial image resampling
# efficiency improvements >= 1.22.3
pyyaml = "*"           # Base requirement
scipy = ">1.2"         # Base requirement, requires openblas
xarray = "<2024.3"     # Base requirement; Pinned to <2024.3 due to bug mentioned in #558
astropy = "*"          # Used for accounting leap seconds when converting epoch timestamps
cartopy = ">=0.23.0"   # No longer requires libgeos; 0.22.0 works but 0.23.0 is needed for tests to pass
ephem = "*"            # Required for overpass predictor
h5py = "*"             # hdf5 readers (GMI)
isodate = "*"          # Required for overpass predictor
jsonschema = ">4.18.0" # Provides validation for YAML plugins
numexpr = "<2.8.5"     # for efficiency improvements
psutil = "*"           # Required for memory checks
pyhdf = "*"            # hdf4 readers (MODIS)
pyaml-env = "*"        # Reading YAML output config files, with paths
pyorbital = "*"        # required by satpy
pypublicdecompwt = "*" # Required to read SEVIRI data
rio-cogeo = "*"        # Cloud Optimized GEOTIFF output
rasterio = "*"         # GEOTIFF output; Pinned to <1.3.10 due to the bug in geotiff_standard
referencing = "*"
satpy = "*"        # efficiency improvements >= 0.33.1
scikit-image = "*" # Radius based center coverage checks
alphashape = ">=1.3.1" # For masking scipy's griddata output
tabulate = "*"     # Tables for the CLI
colorama = "*"     # Easy terminal color codes
pygrib = "*" # Reading GRIB model data
hdf5plugin = "*" # Reading compressed netCDF FCI data. This installs required decomp plugins
                 # In order to use the MTG FCI reader, the HDF5_PLUGIN_PATH is a required
                 # environment variable that points to the directory holding the compiled
                 # decompression plugin. The satpy documentation notes that
                 # 'import hdf5plugin' should be the only requirement to load the data
                 # using their reader, and while that is the case, it appears that you are
                 # unable to manipulate the data outside the satpy.scene object and will
                 # still encounter a "NetCDF: Filter error: undefined filter encountered"
                 # error unless HDF5_PLUGIN_PATH is a valid environment variable. We are
                 # using the pypi hdf5plugin package, and set HDF5_PLUGIN_PATH to
                 # site-packages/hdf5plugin/plugins in the config_geoips file.

# Optional dependencies
# To add a new optional dependency it must be added both here and in one of the "extra"
# groups below.
#
# Doc group
pydata-sphinx-theme = { version = "*", optional = true }
sphinx = { version = "<7.2", optional = true }
sphinx-design = { version = "*", optional = true }
sphinxcontrib-autoprogram = { version = "*", optional = true }
sphinxcontrib-mermaid = { version = "*", optional = true }
m2r2 = { version = "*", optional = true }
brassy = { version = ">=0.0.3", optional = true }
sphinx-argparse = { version = "*", optional = true }
rich = { version = "*", optional = true }
rich-argparse = { version = "*", optional = true }
# Version 3.0.2 causes error , 0.8.4 works
# Unsure why there was such a wide range of version numbers installed.
#  File "lib/python3.10/site-packages/m2r2.py", line 82, in <module>
#    class RestBlockGrammar(mistune.BlockGrammar):
# AttributeError: module 'mistune' has no attribute 'BlockGrammar'
mistune = { version = "0.8.4", optional = true }
# Lint group
bandit = { version = "*", optional = true }
black = { version = "*", optional = true }
pylint = { version = "*", optional = true }
flake8 = { version = "*", optional = true }
flake8-rst-docstrings = { version = "*", optional = true }
flake8-docstrings = { version = "*", optional = true }
flake8-rst = { version = "*", optional = true }
prettier = { version = "*", optional = true }
doc8 = { version = "*", optional = true }
pinkrst = { version = "*", optional = true }
# Test group
pytest = { version = "*", optional = true }
pytest-cov = { version = "*", optional = true }
pytest-xdist = { version = "*", optional = true }
pixelmatch = { version = "*", optional = true }
xarray-datatree = { version = "*", optional = true }
# Debug group
ipython = { version = "*", optional = true }

#[tool.poetry.dev-dependencies]
# nothing at this stage;

[tool.poetry.extras]
doc = [
    "pydata-sphinx-theme",       # Required for building documentation
    "sphinx",                    # Required for building documentation, v7.2 errors
    "sphinx-argparse",           # Required for building documentation for the CLI, which uses autoprogram
    "sphinx-design",             # Required for building documentation
    "sphinxcontrib-autoprogram", # Required for adding command line options to documentation
    "sphinxcontrib-mermaid",     # Required for UML rendering
    "m2r2",                      # Required for rendering markdown into RST-based documentation
    "brassy",                    # Release Note Generation
    "mistune", 	# Required for rendering markdown into RST-based documentation
    "rich", # for building docs; also a dependency of brassy
    "rich-argparse" # for building docs; also a dependency of brassy
]
lint = [
    "bandit",                # Syntax/security checking
    "black",                 # Syntax checking and reformatting
    "pylint",                # Syntax checking
    "flake8",                # Syntax checking
    "flake8-rst-docstrings", # numpy docstring checking
    "flake8-docstrings",     # docstring checking
    "flake8-rst",            # RST checking
    "prettier",              # YAML, JSON, etc linting
    "doc8",                  # RST linting
    "pinkrst",               # RST Auto-formatting
]
test = [
    "pytest",          # Required for unit tests
    "pytest-cov",      # Reports on test coverage
    "pixelmatch",
    "xarray-datatree", # Currently only used in unit tests
    "pytest-xdist",
]
debug = ["ipython"]

[tool.poetry.plugins."geoips.plugin_packages"]
geoips = "geoips"

[tool.poetry.scripts]
convert_trackfile_to_yaml = "geoips.commandline.convert_trackfile_to_yaml:main"
list_available_plugins = "geoips.commandline.list_available_plugins:main"
run_procflow = "geoips.commandline.commandline_interface:main"
update_tc_tracks_database = "geoips.commandline.update_tc_tracks_database:main"
xml_to_yaml_sector = "geoips.commandline.xml_to_yaml_sector:main"
create_plugin_registries = "geoips.create_plugin_registries:main"
expose = "geoips.geoips_utils:expose_geoips_commands"
geoips = "geoips.commandline.commandline_interface:main"
