[tool.poetry]
# required ones
name = "geoips"         # geoips package available at the root of the project
version = "0.0.0"
description = "Geolocated Information Processing System"
authors = ["Tom <tom.jerry@colostate.edu>"]

# optional ones
maintainers = ["Tom <tom.jerry@colostate.edu>"]
#homepage = "set the url"   // optional
repository = "https://github.com/NRLMMD-GEOIPS/geoips"    #optional
#documentation = "set the url"      // optional
#license = {file = "LICENSE"}   // required
readme = "README.md"
keywords = ["GeoIPS", "Poetry"]
packages = [{include = "geoips"}]  # not needed as tool.poetry.name is properly set already
classifiers = [                # // list of PyPI trove classifiers to describe the project
    "Programming Language :: Python :: 3", ]
include = [
    "**/*.txt",
    "**/*.py",
    "**/*.yaml",
]

# uses current version .postN and not incrementing
[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
metadata = false    # don't include local-version hash; date doesn't appear by deafult
style = "pep440"    # pep440 is deafult; can rmeove later on; used for : keeping 0.0.8 as the default install until 0.0.9 is out
#style = "semver"
#tag-branch = "feature-poetry"
strict = true
pattern = "(?x)^((?P<epoch>\\d+)!)?(?P<base>\\d+(\\.\\d+)*)([-._]?((?P<stage>[a-zA-Z]+)[-._]?(?P<revision>\\d+)?))?(\\+(?P<tagged_metadata>.+))?$"

[tool.poetry-dynamic-versioning.substitution]
files = ["*/_version.py"]

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"     # object used to perform the build process

[tool.poetry.dependencies]     # must download to run
python = ">=3.9"    # mandatory to declare the required python version
matplotlib = ">=3.7.0"     # Base requirement works, version specific to test outputs
netcdf4 = "*"              # Base requirement
numpy = "*"                # Base requirement
pyresample = "*"           # Base requirement Geospatial image resampling
			     	       # efficiency improvements >= 1.22.3
pyyaml = "*"               # Base requirement
scipy = ">1.2"  	       # Base requirement, requires openblas
xarray = "*"               # Base requirement
astropy = "*"              # Used for accounting leap seconds when converting epoch timestamps
cartopy = ">=0.22.0"       # No longer requires libgeos
ephem = "*"                # Required for overpass predictor
h5py = "*"                 # hdf5 readers (GMI)
isodate = "*"              # Required for overpass predictor
jsonschema = ">4.18.0"   # Provides validation for YAML plugins
numexpr = "<2.8.5"         # for efficiency improvements
psutil = "*"               # Required for memory checks
pyhdf = "*"                # hdf4 readers (MODIS)
pyaml-env = "*"            # Reading YAML output config files, with paths
pyorbital = "*"            # required by satpy
pypublicdecompwt = "*"     # Required to read SEVIRI data
rasterio = "*"             # GEOTIFF output
referencing = "*"
satpy = "*"               # efficiency improvements >= 0.33.1
scikit-image = "*"        # Radius based center coverage checks

# Optional dependencies
# To add a new optional dependency it must be added both here and in one of the "extra"
# groups below.
#
# Doc group
pydata-sphinx-theme = { version = "*", optional = true }
sphinx = { version = "<7.2", optional = true }
sphinx-design = { version = "*", optional = true }
# Lint group
bandit = { version = "*", optional = true }
black = { version = "*", optional = true }
pylint = { version = "*", optional = true }
flake8 = { version = "*", optional = true }
flake8-rst-docstrings = { version = "*", optional = true }
flake8-docstrings = { version = "*", optional = true }
flake8-rst = { version = "*", optional = true }
prettier = { version = "*", optional = true }
doc8 = { version = "*", optional = true }
# Test group
pytest = { version = "*", optional = true }
pytest-cov = { version = "*", optional = true }
pixelmatch = { version = "*", optional = true }
# Debug group
ipython = { version = "*", optional = true }

#[tool.poetry.dev-dependencies]
# nothing at this stage;

[tool.poetry.extras]
doc = [
    "pydata-sphinx-theme", # Required for building documentation
    "sphinx",              # Required for building documentation, v7.2 errors
    "sphinx-design"        # Required for building documentation
]
lint = [
    "bandit",                # Syntax/security checking
    "black",                 # Syntax checking and reformatting
    "pylint",                # Syntax checking
    "flake8",                # Syntax checking
    "flake8-rst-docstrings", # numpy docstring checking
    "flake8-docstrings",     # docstring checking
    "flake8-rst",            # RST checking
    "prettier",              # YAML, JSON, etc linting
    "doc8"                   # RST linting
]
test = [
    "pytest",		 # Required for unit tests
    "pytest-cov",    # Reports on test coverage
    "pixelmatch"
]
debug = [
    "ipython",
]

[tool.poetry.plugins."geoips.plugin_packages"]
geoips = "geoips"

[tool.poetry.scripts]
convert_trackfile_to_yaml = "geoips.commandline.convert_trackfile_to_yaml:main"
create_sector_image = "geoips.commandline.create_sector_image:main"
list_available_plugins = "geoips.commandline.list_available_plugins:main"
run_procflow = "geoips.commandline.run_procflow:main"
test_interfaces = "geoips.commandline.test_interfaces:main"
update_tc_tracks_database = "geoips.commandline.update_tc_tracks_database:main"
xml_to_yaml_sector = "geoips.commandline.xml_to_yaml_sector:main"

[tool.poetry.plugins."geoips.algorithms"]
Night_Vis = "geoips.plugins.modules.algorithms.visir.Night_Vis"
Night_Vis_GeoIPS1 = "geoips.plugins.modules.algorithms.visir.Night_Vis_GeoIPS1"
Night_Vis_IR = "geoips.plugins.modules.algorithms.visir.Night_Vis_IR"
Night_Vis_IR_GeoIPS1 = "geoips.plugins.modules.algorithms.visir.Night_Vis_IR_GeoIPS1"
pmw_37pct = "geoips.plugins.modules.algorithms.pmw_tb.pmw_37pct"
pmw_89pct = "geoips.plugins.modules.algorithms.pmw_tb.pmw_89pct"
pmw_color37 = "geoips.plugins.modules.algorithms.pmw_tb.pmw_color37"
pmw_color89 = "geoips.plugins.modules.algorithms.pmw_tb.pmw_color89"
single_channel = "geoips.plugins.modules.algorithms.single_channel"
windbarbs = "geoips.plugins.modules.algorithms.sfc_winds.windbarbs"

[tool.poetry.plugins."geoips.area_def_generators"]
clat_clon_resolution_shape = "geoips.interface_modules.area_def_generators.clat_clon_resolution_shape:clat_clon_resolution_shape"

[tool.poetry.plugins."geoips.colormappers"]
IR_BD = "geoips.plugins.modules.colormappers.visir.IR_BD"
Infrared = "geoips.plugins.modules.colormappers.visir.Infrared"
WV = "geoips.plugins.modules.colormappers.visir.WV"
cmap_rgb = "geoips.plugins.modules.colormappers.cmap_rgb"
matplotlib_linear_norm = "geoips.plugins.modules.colormappers.matplotlib_linear_norm"
pmw_150H = "geoips.plugins.modules.colormappers.pmw_tb.cmap_150H"
pmw_37H = "geoips.plugins.modules.colormappers.pmw_tb.cmap_37H"
pmw_37H_Legacy = "geoips.plugins.modules.colormappers.pmw_tb.cmap_37H_Legacy"
pmw_37H_Physical = "geoips.plugins.modules.colormappers.pmw_tb.cmap_37H_Physical"
pmw_37pct = "geoips.plugins.modules.colormappers.pmw_tb.cmap_37pct"
pmw_89H = "geoips.plugins.modules.colormappers.pmw_tb.cmap_89H"
pmw_89HW = "geoips.plugins.modules.colormappers.pmw_tb.cmap_89HW"
pmw_89H_Legacy = "geoips.plugins.modules.colormappers.pmw_tb.cmap_89H_Legacy"
pmw_89H_Physical = "geoips.plugins.modules.colormappers.pmw_tb.cmap_89H_Physical"
pmw_89pct = "geoips.plugins.modules.colormappers.pmw_tb.cmap_89pct"
pmw_Rain = "geoips.plugins.modules.colormappers.pmw_tb.cmap_Rain"
tpw_pwat = "geoips.plugins.modules.colormappers.tpw.tpw_pwat"
wind_radii_transitions = "geoips.plugins.modules.colormappers.winds.wind_radii_transitions"

[tool.poetry.plugins."geoips.coverage_checkers"]
center_radius = "geoips.plugins.modules.coverage_checkers.center_radius"
center_radius_rgba = "geoips.plugins.modules.coverage_checkers.center_radius_rgba"
masked_arrays = "geoips.plugins.modules.coverage_checkers.masked_arrays"
numpy_arrays_nan = "geoips.plugins.modules.coverage_checkers.numpy_arrays_nan"
rgba = "geoips.plugins.modules.coverage_checkers.rgba"
windbarbs = "geoips.plugins.modules.coverage_checkers.windbarbs"

[tool.poetry.plugins."geoips.filename_formatters"]
geoips_fname = "geoips.plugins.modules.filename_formatters.geoips_fname"
geoips_netcdf_fname = "geoips.plugins.modules.filename_formatters.geoips_netcdf_fname"
geotiff_fname = "geoips.plugins.modules.filename_formatters.geotiff_fname"
metadata_default_fname = "geoips.plugins.modules.filename_formatters.metadata_default_fname"
tc_clean_fname = "geoips.plugins.modules.filename_formatters.tc_clean_fname"
tc_fname = "geoips.plugins.modules.filename_formatters.tc_fname"
text_winds_day_fname = "geoips.plugins.modules.filename_formatters.text_winds_day_fname"
text_winds_full_fname = "geoips.plugins.modules.filename_formatters.text_winds_full_fname"
text_winds_tc_fname = "geoips.plugins.modules.filename_formatters.text_winds_tc_fname"

[tool.poetry.plugins."geoips.interpolators"]
interp_gauss = "geoips.plugins.modules.interpolators.pyresample_wrappers.interp_gauss"
interp_grid = "geoips.plugins.modules.interpolators.scipy_wrappers.interp_grid"
interp_nearest = "geoips.plugins.modules.interpolators.pyresample_wrappers.interp_nearest"

[tool.poetry.plugins."geoips.output_comparisons"]
compare_outputs = "geoips.compare_outputs:compare_outputs"

[tool.poetry.plugins."geoips.output_formatters"]
full_disk_image = "geoips.plugins.modules.output_formatters.full_disk_image"
geotiff_standard = "geoips.plugins.modules.output_formatters.geotiff_standard"
imagery_annotated = "geoips.plugins.modules.output_formatters.imagery_annotated"
imagery_clean = "geoips.plugins.modules.output_formatters.imagery_clean"
imagery_windbarbs = "geoips.plugins.modules.output_formatters.imagery_windbarbs"
imagery_windbarbs_clean = "geoips.plugins.modules.output_formatters.imagery_windbarbs_clean"
metadata_default = "geoips.plugins.modules.output_formatters.metadata_default"
metadata_tc = "geoips.plugins.modules.output_formatters.metadata_tc"
netcdf_geoips = "geoips.plugins.modules.output_formatters.netcdf_geoips"
netcdf_xarray = "geoips.plugins.modules.output_formatters.netcdf_xarray"
text_winds = "geoips.plugins.modules.output_formatters.text_winds"
unprojected_image = "geoips.plugins.modules.output_formatters.unprojected_image"

[tool.poetry.plugins."geoips.procflows"]
config_based = "geoips.plugins.modules.procflows.config_based"
single_source = "geoips.plugins.modules.procflows.single_source"

[tool.poetry.plugins."geoips.readers"]
abi_l2_netcdf = "geoips.plugins.modules.readers.abi_l2_netcdf"
abi_netcdf = "geoips.plugins.modules.readers.abi_netcdf"
ahi_hsd = "geoips.plugins.modules.readers.ahi_hsd"
amsr2_netcdf = "geoips.plugins.modules.readers.amsr2_netcdf"
amsr2_remss_winds_netcdf = "geoips.plugins.modules.readers.amsr2_remss_winds_netcdf"
amsub_hdf = "geoips.plugins.modules.readers.amsub_hdf"
amsub_mirs = "geoips.plugins.modules.readers.amsub_mirs"
ascat_uhr_netcdf = "geoips.plugins.modules.readers.ascat_uhr_netcdf"
atms_hdf5 = "geoips.plugins.modules.readers.atms_hdf5"
ewsg_netcdf = "geoips.plugins.modules.readers.ewsg_netcdf"
geoips_netcdf = "geoips.plugins.modules.readers.geoips_netcdf"
gmi_hdf5 = "geoips.plugins.modules.readers.gmi_hdf5"
imerg_hdf5 = "geoips.plugins.modules.readers.imerg_hdf5"
mimic_netcdf = "geoips.plugins.modules.readers.mimic_netcdf"
modis_hdf4 = "geoips.plugins.modules.readers.modis_hdf4"
saphir_hdf5 = "geoips.plugins.modules.readers.saphir_hdf5"
sar_winds_netcdf = "geoips.plugins.modules.readers.sar_winds_netcdf"
scat_knmi_winds_netcdf = "geoips.plugins.modules.readers.scat_knmi_winds_netcdf"
scat_noaa_winds_netcdf = "geoips.plugins.modules.readers.scat_noaa_winds_netcdf"
seviri_hrit = "geoips.plugins.modules.readers.seviri_hrit"
sfc_winds_text = "geoips.plugins.modules.readers.sfc_winds_text"
smap_remss_winds_netcdf = "geoips.plugins.modules.readers.smap_remss_winds_netcdf"
smos_winds_netcdf = "geoips.plugins.modules.readers.smos_winds_netcdf"
ssmi_binary = "geoips.plugins.modules.readers.ssmi_binary"
ssmis_binary = "geoips.plugins.modules.readers.ssmis_binary"
viirs_netcdf = "geoips.plugins.modules.readers.viirs_netcdf"
wfabba_ascii = "geoips.plugins.modules.readers.wfabba_ascii"
windsat_idr37_binary = "geoips.plugins.modules.readers.windsat_idr37_binary"
windsat_remss_winds_netcdf = "geoips.plugins.modules.readers.windsat_remss_winds_netcdf"

[tool.poetry.plugins."geoips.sector_metadata_generators"]
bdeck_parser = "geoips.plugins.modules.sector_metadata_generators.bdeck_parser"
tc_sector_file_parser = "geoips.plugins.modules.sector_metadata_generators.tc_sector_file_parser"

[tool.poetry.plugins."geoips.sector_spec_generators"]
center_coordinates = "geoips.plugins.modules.sector_spec_generators.center_coordinates"

[tool.poetry.plugins."geoips.trackfile_parsers"]
bdeck_parser = "geoips.interface_modules.trackfile_parsers.bdeck_parser:bdeck_parser"
flat_sectorfile_parser = "geoips.interface_modules.trackfile_parsers.flat_sectorfile_parser:flat_sectorfile_parser"

[tool.poetry.plugins."geoips.title_formatters"]
static_standard = "geoips.plugins.modules.title_formatters.static_standard"
tc_copyright = "geoips.plugins.modules.title_formatters.tc_copyright"
tc_standard = "geoips.plugins.modules.title_formatters.tc_standard"
