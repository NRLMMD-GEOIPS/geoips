#  Experimenting with poetry as the build backend

#[project]
[tool.poetry]
name = "geoips"         # geoips package available at the root of the project
#dynamic = ["version"]
version = "0.1.0"   # this has to be fixed; it's dynamic in setuptools
description = "Geolocated Information Processing System"
authors = ["Tom <tom.jerry@colostate.edu>"]
maintainers = ["Tom <tom.jerry@colostate.edu>"]
#homepage = "set the url"   // optional
repository = "https://github.com/NRLMMD-GEOIPS/geoips"    #optional
#documentation = "set the url"      // optional
#license = {file = "LICENSE"}   // required
readme = "README.md"
keywords = ["GeoIPS", "Poetry"]
packages = [{include = "geoips"}]  # not needed as tool.poetry.name is properly set already
classifiers = [                # // list of PyPI trove classifiers to describe the project
    "Programming Language :: Python :: 3",
]


# remains same in setuptools and poetry
[build-system]
#requires = ["setuptools>=61.2", "setuptools-scm"]
#build-backend = "setuptools.build_meta"
#requires = ["poetry-core"]
#build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"     # object used to perform the build process


#
##dependencies = [
[tool.poetry.dependencies]     # must download to run
    python = ">=3.9, <=3.10"           # mandatory to declare the required python version
    requests = "^2.31.0"
    #    pyresample = ">= 1.22.3"  # Base requirement - efficiency improvements >= 1.22.3
    pyresample = "^1.27.1"
    #    "numpy",  # Base requirement
    numpy = "^1.25.2"
    #    "xarray",  # Base requirement
    xarray = "^2023.7.0"
    #    "matplotlib>=3.7.0",  # Base requirement
    #    # 20230321, allow >=3.7.0, changes annotated imagery outputs
    # 20230214, force to 3.6.3 until outputs updated
    # 20220922, force to 0.20.3/3.5.3 until outputs updated
    #           also: 3.6.0 incompatible with 0.20.3, but 0.21.0 works
    matplotlib = "^3.7.2"
    #    "scipy",  # Base requirement, requires openblas
    scipy = "^1.11.2"   # did not require openblas; investigate
    #    "netcdf4",  # Base requirement
    netcdf4 = "^1.6.4"
    #    "pyyaml",  # Base requirement
    pyyaml = "^6.0.1"

    #    "pyshp>=2.2.0",
    #   pyshp = "^2.3.1"    #with poetry add
    #pyshp = ">=2.2.0, *"
    pyshp = "^2.3.1"

    #    "shapely>=1.8.2",  # requires libgeos
    shapely = "^2.0.1"

    #    "cartopy>=0.22.0",  # requires libgeos
    #   cartopy = "^0.22.0"     // with poetry add
    cartopy = ">=0.22.0, *"

    #    "pyaml_env",  # Reading YAML output config files, with paths
    pyaml-env = "^1.2.1"
    #    "h5py",  # hdf5 readers (GMI)
    h5py = "^3.9.0"
    #    "pyhdf",  # hdf4 readers (MODIS)
    pyhdf = "^0.11.3"
    #    "rasterio",  # GEOTIFF output
    rasterio = "^1.3.8"
    #    "psutil",  # Required for memory checks
    psutil = "^5.9.5"
    #    "pyorbital",  # required by satpy
    pyorbital = "^1.8.0"
    #    "ephem",  # Required for overpass predictor
    ephem = "^4.1.4"
    #    "isodate",  # Required for overpass predictor
    isodate = "^0.6.1"
    #    "satpy",  # efficiency improvements >= 0.33.1
    satpy = "^0.43.0"
    #    "numexpr",  # for efficiency improvements
    numexpr = "^2.8.5"
    #    "scikit-image",  # Radius based center coverage checks
    scikit-image = "^0.21.0"
##]

#[tool.poetry.dev-dependencies]
# nothing at this stage;

#
#[project.optional-dependencies]
#doc = [
#    "sphinx",  # Required for building documentation
#    "sphinx-design",  # Required for building documentation
#    "pydata-sphinx-theme",  # Required for building documentation
#]

#lint = [
#    "bandit",  # Syntax/security checking
#    "black",   # Syntax checking and reformatting
#    "pylint",  # Syntax checking
#    "flake8",  # Syntax checking
#    "flake8-rst-docstrings",  # numpy docstring checking
#    "flake8-docstrings",  # docstring checking
#    "flake8-rst",  # RST checking
#    "prettier",  # YAML, JSON, etc linting
#    "doc8",  # RST linting
#]


[tool.poetry.group.doc.dependencies]
sphinx = "^7.2.2"               # Required for building documentation
sphinx-design = "^0.5.0"        # Required for building documentation
pydata-sphinx-theme = "^0.13.3" # Required for building documentation

[tool.poetry.group.lint.dependencies]
bandit = "^1.7.5"   # Syntax/security checking
black = "^23.7.0"   # Syntax checking and reformatting
pylint = "^2.17.5"  # Syntax checking
flake8 = "^6.1.0"   # Syntax checking
flake8-rst-docstrings = "^0.3.0"    # numpy docstring checking
flake8-docstrings = "^1.7.0"    # docstring checking
flake8-rst = "^0.8.0"           # RST checking
prettier = "^0.0.7"             # YAML, JSON, etc linting
doc8 = "^1.1.1"                 # RST linting


#[project.entry-points."geoips.readers"]
[tool.poetry.plugins."geoips.readers"]
abi_netcdf = "geoips.interface_modules.readers.abi_netcdf:abi_netcdf"
abi_l2_netcdf = "geoips.interface_modules.readers.abi_l2_netcdf:abi_l2_netcdf"
ahi_hsd = "geoips.interface_modules.readers.ahi_hsd:ahi_hsd"
amsr2_netcdf = "geoips.interface_modules.readers.amsr2_netcdf:amsr2_netcdf"
amsr2_remss_winds_netcdf = "geoips.interface_modules.readers.amsr2_remss_winds_netcdf:amsr2_remss_winds_netcdf"
amsub_hdf = "geoips.interface_modules.readers.amsub_hdf:amsub_hdf"
amsub_mirs = "geoips.interface_modules.readers.amsub_mirs:amsub_mirs"
atms_hdf5 = "geoips.interface_modules.readers.atms_hdf5:atms_hdf5"
ewsg_netcdf = "geoips.interface_modules.readers.ewsg_netcdf:ewsg_netcdf"
geoips_netcdf = "geoips.interface_modules.readers.geoips_netcdf:geoips_netcdf"
gmi_hdf5 = "geoips.interface_modules.readers.gmi_hdf5:gmi_hdf5"
imerg_hdf5 = "geoips.interface_modules.readers.imerg_hdf5:imerg_hdf5"
mimic_netcdf = "geoips.interface_modules.readers.mimic_netcdf:mimic_netcdf"
modis_hdf4 = "geoips.interface_modules.readers.modis_hdf4:modis_hdf4"
saphir_hdf5 = "geoips.interface_modules.readers.saphir_hdf5:saphir_hdf5"
seviri_hrit = "geoips.interface_modules.readers.seviri_hrit:seviri_hrit"
ascat_uhr_netcdf = "geoips.interface_modules.readers.ascat_uhr_netcdf:ascat_uhr_netcdf"
smap_remss_winds_netcdf = "geoips.interface_modules.readers.smap_remss_winds_netcdf:smap_remss_winds_netcdf"
smos_winds_netcdf = "geoips.interface_modules.readers.smos_winds_netcdf:smos_winds_netcdf"
scat_knmi_winds_netcdf = "geoips.interface_modules.readers.scat_knmi_winds_netcdf:scat_knmi_winds_netcdf"
windsat_remss_winds_netcdf = "geoips.interface_modules.readers.windsat_remss_winds_netcdf:windsat_remss_winds_netcdf"
sar_winds_netcdf = "geoips.interface_modules.readers.sar_winds_netcdf:sar_winds_netcdf"
sfc_winds_text = "geoips.interface_modules.readers.sfc_winds_text:sfc_winds_text"
ssmi_binary = "geoips.interface_modules.readers.ssmi_binary:ssmi_binary"
ssmis_binary = "geoips.interface_modules.readers.ssmis_binary:ssmis_binary"
viirs_netcdf = "geoips.interface_modules.readers.viirs_netcdf:viirs_netcdf"
wfabba_ascii = "geoips.interface_modules.readers.wfabba_ascii:wfabba_ascii"
windsat_idr37_binary = "geoips.interface_modules.readers.windsat_idr37_binary:windsat_idr37_binary"

#[project.entry-points."geoips.output_formats"]
[tool.poetry.plugins."geoips.output_formats"]
full_disk_image = "geoips.interface_modules.output_formats.full_disk_image:full_disk_image"
unprojected_image = "geoips.interface_modules.output_formats.unprojected_image:unprojected_image"
geotiff_standard = "geoips.interface_modules.output_formats.geotiff_standard:geotiff_standard"
imagery_annotated = "geoips.interface_modules.output_formats.imagery_annotated:imagery_annotated"
imagery_clean = "geoips.interface_modules.output_formats.imagery_clean:imagery_clean"
imagery_windbarbs = "geoips.interface_modules.output_formats.imagery_windbarbs:imagery_windbarbs"
imagery_windbarbs_clean = "geoips.interface_modules.output_formats.imagery_windbarbs_clean:imagery_windbarbs_clean"
netcdf_geoips = "geoips.interface_modules.output_formats.netcdf_geoips:netcdf_geoips"
netcdf_xarray = "geoips.interface_modules.output_formats.netcdf_xarray:netcdf_xarray"
text_winds = "geoips.interface_modules.output_formats.text_winds:text_winds"
metadata_default = "geoips.interface_modules.output_formats.metadata_default:metadata_default"
metadata_tc = "geoips.interface_modules.output_formats.metadata_tc:metadata_tc"

#[project.entry-points."geoips.algorithms"]
[tool.poetry.plugins."geoips.algorithms"]
single_channel = "geoips.interface_modules.algorithms.single_channel:single_channel"
"pmw_tb.pmw_37pct" = "geoips.interface_modules.algorithms.pmw_tb.pmw_37pct"
"pmw_tb.pmw_89pct" = "geoips.interface_modules.algorithms.pmw_tb.pmw_89pct"
"pmw_tb.pmw_color37" = "geoips.interface_modules.algorithms.pmw_tb.pmw_color37:pmw_color37"
"pmw_tb.pmw_color89" = "geoips.interface_modules.algorithms.pmw_tb.pmw_color89:pmw_color89"
"sfc_winds.windbarbs" = "geoips.interface_modules.algorithms.sfc_winds.windbarbs:windbarbs"
"visir.Night_Vis_IR" = "geoips.interface_modules.algorithms.visir.Night_Vis_IR:Night_Vis_IR"
"visir.Night_Vis_IR_GeoIPS1" = "geoips.interface_modules.algorithms.visir.Night_Vis_IR_GeoIPS1:Night_Vis_IR_GeoIPS1"
"visir.Night_Vis_GeoIPS1" = "geoips.interface_modules.algorithms.visir.Night_Vis_GeoIPS1:Night_Vis_GeoIPS1"
"visir.Night_Vis" = "geoips.interface_modules.algorithms.visir.Night_Vis:Night_Vis"

#[project.entry-points."geoips.procflows"]
[tool.poetry.plugins."geoips.procflows"]
single_source = "geoips.interface_modules.procflows.single_source:single_source"
config_based = "geoips.interface_modules.procflows.config_based:config_based"

#[project.entry-points."geoips.trackfile_parsers"]
[tool.poetry.plugins."geoips.trackfile_parsers"]
flat_sectorfile_parser = "geoips.interface_modules.trackfile_parsers.flat_sectorfile_parser:flat_sectorfile_parser"
bdeck_parser = "geoips.interface_modules.trackfile_parsers.bdeck_parser:bdeck_parser"

#[project.entry-points."geoips.area_def_generators"]
[tool.poetry.plugins."geoips.area_def_generators"]
clat_clon_resolution_shape = "geoips.interface_modules.area_def_generators.clat_clon_resolution_shape:clat_clon_resolution_shape"

#[project.entry-points."geoips.interpolation"]
[tool.poetry.plugins."geoips.interpolation"]
"pyresample_wrappers.interp_nearest" = "geoips.interface_modules.interpolation.pyresample_wrappers.interp_nearest:interp_nearest"
"pyresample_wrappers.interp_gauss" = "geoips.interface_modules.interpolation.pyresample_wrappers.interp_gauss:interp_gauss"
"scipy_wrappers.interp_grid" = "geoips.interface_modules.interpolation.scipy_wrappers.interp_grid:interp_grid"

#[project.entry-points."geoips.user_colormaps"]
[tool.poetry.plugins."geoips.user_colormaps"]
cmap_rgb = "geoips.interface_modules.user_colormaps.cmap_rgb:cmap_rgb"
matplotlib_linear_norm = "geoips.interface_modules.user_colormaps.matplotlib_linear_norm:matplotlib_linear_norm"
"pmw_tb.cmap_150H" = "geoips.interface_modules.user_colormaps.pmw_tb.cmap_150H:cmap_150H"
"pmw_tb.cmap_37H_Legacy" = "geoips.interface_modules.user_colormaps.pmw_tb.cmap_37H_Legacy:cmap_37H_Legacy"
"pmw_tb.cmap_37H_Physical" = "geoips.interface_modules.user_colormaps.pmw_tb.cmap_37H_Physical:cmap_37H_Physical"
"pmw_tb.cmap_37H" = "geoips.interface_modules.user_colormaps.pmw_tb.cmap_37H:cmap_37H"
"pmw_tb.cmap_37pct" = "geoips.interface_modules.user_colormaps.pmw_tb.cmap_37pct:cmap_37pct"
"pmw_tb.cmap_89H_Legacy" = "geoips.interface_modules.user_colormaps.pmw_tb.cmap_89H_Legacy:cmap_89H_Legacy"
"pmw_tb.cmap_89H_Physical" = "geoips.interface_modules.user_colormaps.pmw_tb.cmap_89H_Physical:cmap_89H_Physical"
"pmw_tb.cmap_89H" = "geoips.interface_modules.user_colormaps.pmw_tb.cmap_89H:cmap_89H"
"pmw_tb.cmap_89pct" = "geoips.interface_modules.user_colormaps.pmw_tb.cmap_89pct:cmap_89pct"
"pmw_tb.cmap_89HW" = "geoips.interface_modules.user_colormaps.pmw_tb.cmap_89HW:cmap_89HW"
"pmw_tb.cmap_Rain" = "geoips.interface_modules.user_colormaps.pmw_tb.cmap_Rain:cmap_Rain"
"tpw.tpw_cimss" = "geoips.interface_modules.user_colormaps.tpw.tpw_cimss:tpw_cimss"
"tpw.tpw_purple" = "geoips.interface_modules.user_colormaps.tpw.tpw_purple:tpw_purple"
"tpw.tpw_pwat" = "geoips.interface_modules.user_colormaps.tpw.tpw_pwat:tpw_pwat"
"visir.Infrared" = "geoips.interface_modules.user_colormaps.visir.Infrared:Infrared"
"visir.IR_BD" = "geoips.interface_modules.user_colormaps.visir.IR_BD:IR_BD"
"visir.WV" = "geoips.interface_modules.user_colormaps.visir.WV:WV"
"winds.wind_radii_transitions" = "geoips.interface_modules.user_colormaps.winds.wind_radii_transitions:wind_radii_transitions"

#[project.entry-points."geoips.title_formats"]
[tool.poetry.plugins."geoips.title_formats"]
tc_standard = "geoips.interface_modules.title_formats.tc_standard:tc_standard"
tc_copyright = "geoips.interface_modules.title_formats.tc_copyright:tc_copyright"
static_standard = "geoips.interface_modules.title_formats.static_standard:static_standard"

#[project.entry-points."geoips.coverage_checks"]
[tool.poetry.plugins."geoips.coverage_checks"]
masked_arrays = "geoips.interface_modules.coverage_checks.masked_arrays:masked_arrays"
numpy_arrays_nan = "geoips.interface_modules.coverage_checks.numpy_arrays_nan:numpy_arrays_nan"
center_radius = "geoips.interface_modules.coverage_checks.center_radius:center_radius"
center_radius_rgba = "geoips.interface_modules.coverage_checks.center_radius_rgba:center_radius_rgba"
rgba = "geoips.interface_modules.coverage_checks.rgba:rgba"
windbarbs = "geoips.interface_modules.coverage_checks.windbarbs:windbarbs"



#[project.entry-points."geoips.filename_formats"]
[tool.poetry.plugins."geoips.filename_formats"]
geoips_fname = "geoips.interface_modules.filename_formats.geoips_fname:geoips_fname"
geoips_netcdf_fname = "geoips.interface_modules.filename_formats.geoips_netcdf_fname:geoips_netcdf_fname"
geotiff_fname = "geoips.interface_modules.filename_formats.geotiff_fname:geotiff_fname"
tc_fname = "geoips.interface_modules.filename_formats.tc_fname:tc_fname"
tc_clean_fname = "geoips.interface_modules.filename_formats.tc_clean_fname:tc_clean_fname"
text_winds_day_fname = "geoips.interface_modules.filename_formats.text_winds_day_fname:text_winds_day_fname"
text_winds_full_fname = "geoips.interface_modules.filename_formats.text_winds_full_fname:text_winds_full_fname"
text_winds_tc_fname = "geoips.interface_modules.filename_formats.text_winds_tc_fname:text_winds_tc_fname"
metadata_default_fname = "geoips.interface_modules.filename_formats.metadata_default_fname:metadata_default_fname"





[tool.setuptools.packages]
find = {namespaces = false}

[tool.setuptools.package-dir]
"" = "."

[tool.setuptools.package-data]
"*" = [
    "*.txt",
    "*.py",
    "*.yaml",
    "yaml_configs/*",
    "yaml_configs/*/*",
    "yaml_configs/*/*/*",
    "image_utils/ascii_palettes/*",
]

[tool.setuptools_scm]
"version_scheme" = "post-release"  # Use current version .postN vs incrementing
"local_scheme" = "no-local-version"  # Don't include hash, or date, just postN
"write_to" = "geoips/version.py"  # Write an actual file

[tool.setuptools.dynamic]
entry-points = {file = ["entry-points.ini"]}



## Python-style entrypoints and scripts are easily expressed
#[tool.poetry.scripts]
#my-script = "my_package:main"


[project.entry-points.console_scripts]
run_procflow = "geoips.commandline.run_procflow:main"
convert_trackfile_to_yaml = "geoips.commandline.convert_trackfile_to_yaml:main"
update_tc_tracks_database = "geoips.commandline.update_tc_tracks_database:main"
xml_to_yaml_sector = "geoips.commandline.xml_to_yaml_sector:main"
test_interfaces = "geoips.commandline.test_interfaces:main"
list_available_modules = "geoips.commandline.list_available_modules:main"
# do we need to distribute lock files along with the package
# package a need c.2 and package b need c.3 how does lock file takes care of it
# how to get custom entry points without making them available as command line scripts











[project.entry-points."geoips.output_comparisons"]
compare_outputs = "geoips.compare_outputs:compare_outputs"

