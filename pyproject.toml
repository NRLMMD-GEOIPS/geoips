[build-system]
requires = ["setuptools>=61.2", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages]
find = {namespaces = false}

[tool.setuptools.package-dir]
"" = "."

[tool.setuptools.package-data]
"*" = [
    "*.txt",
    "*.py",
    "*.yaml",
    "yaml_configs/*",
    "yaml_configs/*/*",
    "yaml_configs/*/*/*",
    "image_utils/ascii_palettes/*",
]

[tool.setuptools_scm]
"version_scheme" = "post-release"  # Use current version .postN vs incrementing
"local_scheme" = "no-local-version"  # Don't include hash, or date, just postN
"write_to" = "geoips/version.py"  # Write an actual file

[tool.setuptools.dynamic]
entry-points = {file = ["entry-points.ini"]}

[project]
name = "geoips"
authors = []
description = "Geolocated Information Processing System"
readme = "README.md"
requires-python = ">=3.9"
keywords = []
license = {file = "LICENSE"}
classifiers = [
    "Programming Language :: Python :: 3",
]
dynamic = ["version"]
dependencies = [
    "jsonschema",  # Provides validation for YAML plugins
    "pyresample",  # Base requirement - efficiency improvements >= 1.22.3
    "numpy",  # Base requirement
    "xarray",  # Base requirement
    "matplotlib>=3.7.0",  # Base requirement
    # 20230321, allow >=3.7.0, changes annotated imagery outputs
    # 20230214, force to 3.6.3 until outputs updated
    # 20220922, force to 0.20.3/3.5.3 until outputs updated
    #           also: 3.6.0 incompatible with 0.20.3, but 0.21.0 works
    "scipy",  # Base requirement, requires openblas
    "netcdf4",  # Base requirement
    "pyyaml",  # Base requirement
    "pyshp>=2.2.0",
    "shapely>=1.8.2",  # requires libgeos
    "cartopy>=0.21.0",  # requires libgeos
    "pyaml_env",  # Reading YAML output config files, with paths
    "h5py",  # hdf5 readers (GMI)
    "pyhdf",  # hdf4 readers (MODIS)
    "rasterio",  # GEOTIFF output
    "psutil",  # Required for memory checks
    "pyorbital",  # required by satpy
    "ephem",  # Required for overpass predictor
    "isodate",  # Required for overpass predictor
    "satpy",  # efficiency improvements >= 0.33.1
    "numexpr",  # for efficiency improvements
    "scikit-image",  # Radius based center coverage checks
]

[project.optional-dependencies]
test = [
    "pytest",  # Required for unit tests
    "pytest-cov"  # Reports on test coverage
]
doc = [
    "sphinx",  # Required for building documentation
    "sphinx-design",  # Required for building documentation
    "pydata-sphinx-theme",  # Required for building documentation
]
lint = [
    "bandit",  # Syntax/security checking
    "black",   # Syntax checking and reformatting
    "pylint",  # Syntax checking
    "flake8",  # Syntax checking
    "flake8-rst-docstrings",  # numpy docstring checking
    "flake8-docstrings",  # docstring checking
    "flake8-rst",  # RST checking
    "prettier",  # YAML, JSON, etc linting
    "doc8",  # RST linting
]

[project.entry-points.console_scripts]
run_procflow = "geoips.commandline.run_procflow:main"
convert_trackfile_to_yaml = "geoips.commandline.convert_trackfile_to_yaml:main"
update_tc_tracks_database = "geoips.commandline.update_tc_tracks_database:main"
xml_to_yaml_sector = "geoips.commandline.xml_to_yaml_sector:main"
test_interfaces = "geoips.commandline.test_interfaces:main"
list_available_modules = "geoips.commandline.list_available_modules:main"

[project.entry-points."geoips.readers"]
abi_netcdf = "geoips.plugins.modules.readers.abi_netcdf:abi_netcdf"
abi_l2_netcdf = "geoips.plugins.modules.readers.abi_l2_netcdf:abi_l2_netcdf"
ahi_hsd = "geoips.plugins.modules.readers.ahi_hsd:ahi_hsd"
amsr2_netcdf = "geoips.plugins.modules.readers.amsr2_netcdf:amsr2_netcdf"
amsr2_remss_winds_netcdf = "geoips.plugins.modules.readers.amsr2_remss_winds_netcdf:amsr2_remss_winds_netcdf"
amsub_hdf = "geoips.plugins.modules.readers.amsub_hdf:amsub_hdf"
amsub_mirs = "geoips.plugins.modules.readers.amsub_mirs:amsub_mirs"
atms_hdf5 = "geoips.plugins.modules.readers.atms_hdf5:atms_hdf5"
ewsg_netcdf = "geoips.plugins.modules.readers.ewsg_netcdf:ewsg_netcdf"
geoips_netcdf = "geoips.plugins.modules.readers.geoips_netcdf:geoips_netcdf"
gmi_hdf5 = "geoips.plugins.modules.readers.gmi_hdf5:gmi_hdf5"
imerg_hdf5 = "geoips.plugins.modules.readers.imerg_hdf5:imerg_hdf5"
mimic_netcdf = "geoips.plugins.modules.readers.mimic_netcdf:mimic_netcdf"
modis_hdf4 = "geoips.plugins.modules.readers.modis_hdf4:modis_hdf4"
saphir_hdf5 = "geoips.plugins.modules.readers.saphir_hdf5:saphir_hdf5"
seviri_hrit = "geoips.plugins.modules.readers.seviri_hrit:seviri_hrit"
ascat_uhr_netcdf = "geoips.plugins.modules.readers.ascat_uhr_netcdf:ascat_uhr_netcdf"
smap_remss_winds_netcdf = "geoips.plugins.modules.readers.smap_remss_winds_netcdf:smap_remss_winds_netcdf"
smos_winds_netcdf = "geoips.plugins.modules.readers.smos_winds_netcdf:smos_winds_netcdf"
scat_knmi_winds_netcdf = "geoips.plugins.modules.readers.scat_knmi_winds_netcdf:scat_knmi_winds_netcdf"
windsat_remss_winds_netcdf = "geoips.plugins.modules.readers.windsat_remss_winds_netcdf:windsat_remss_winds_netcdf"
sar_winds_netcdf = "geoips.plugins.modules.readers.sar_winds_netcdf:sar_winds_netcdf"
sfc_winds_text = "geoips.plugins.modules.readers.sfc_winds_text:sfc_winds_text"
ssmi_binary = "geoips.plugins.modules.readers.ssmi_binary:ssmi_binary"
ssmis_binary = "geoips.plugins.modules.readers.ssmis_binary:ssmis_binary"
viirs_netcdf = "geoips.plugins.modules.readers.viirs_netcdf:viirs_netcdf"
wfabba_ascii = "geoips.plugins.modules.readers.wfabba_ascii:wfabba_ascii"
windsat_idr37_binary = "geoips.plugins.modules.readers.windsat_idr37_binary:windsat_idr37_binary"

[project.entry-points."geoips.output_formats"]
full_disk_image = "geoips.plugins.modules.output_formats.full_disk_image:full_disk_image"
unprojected_image = "geoips.plugins.modules.output_formats.unprojected_image:unprojected_image"
geotiff_standard = "geoips.plugins.modules.output_formats.geotiff_standard:geotiff_standard"
imagery_annotated = "geoips.plugins.modules.output_formats.imagery_annotated:imagery_annotated"
imagery_clean = "geoips.plugins.modules.output_formats.imagery_clean:imagery_clean"
imagery_windbarbs = "geoips.plugins.modules.output_formats.imagery_windbarbs:imagery_windbarbs"
imagery_windbarbs_clean = "geoips.plugins.modules.output_formats.imagery_windbarbs_clean:imagery_windbarbs_clean"
netcdf_geoips = "geoips.plugins.modules.output_formats.netcdf_geoips:netcdf_geoips"
netcdf_xarray = "geoips.plugins.modules.output_formats.netcdf_xarray:netcdf_xarray"
text_winds = "geoips.plugins.modules.output_formats.text_winds:text_winds"
metadata_default = "geoips.plugins.modules.output_formats.metadata_default:metadata_default"
metadata_tc = "geoips.plugins.modules.output_formats.metadata_tc:metadata_tc"

[project.entry-points."geoips.algorithms"]
single_channel = "geoips.plugins.modules.algorithms.single_channel:single_channel"
"pmw_tb.pmw_37pct" = "geoips.plugins.modules.algorithms.pmw_tb.pmw_37pct"
"pmw_tb.pmw_89pct" = "geoips.plugins.modules.algorithms.pmw_tb.pmw_89pct"
"pmw_tb.pmw_color37" = "geoips.plugins.modules.algorithms.pmw_tb.pmw_color37:pmw_color37"
"pmw_tb.pmw_color89" = "geoips.plugins.modules.algorithms.pmw_tb.pmw_color89:pmw_color89"
"sfc_winds.windbarbs" = "geoips.plugins.modules.algorithms.sfc_winds.windbarbs:windbarbs"
"visir.Night_Vis_IR" = "geoips.plugins.modules.algorithms.visir.Night_Vis_IR:Night_Vis_IR"
"visir.Night_Vis_IR_GeoIPS1" = "geoips.plugins.modules.algorithms.visir.Night_Vis_IR_GeoIPS1:Night_Vis_IR_GeoIPS1"
"visir.Night_Vis_GeoIPS1" = "geoips.plugins.modules.algorithms.visir.Night_Vis_GeoIPS1:Night_Vis_GeoIPS1"
"visir.Night_Vis" = "geoips.plugins.modules.algorithms.visir.Night_Vis:Night_Vis"

[project.entry-points."geoips.procflows"]
single_source = "geoips.plugins.modules.procflows.single_source:single_source"
config_based = "geoips.plugins.modules.procflows.config_based:config_based"

[project.entry-points."geoips.trackfile_parsers"]
flat_sectorfile_parser = "geoips.plugins.modules.trackfile_parsers.flat_sectorfile_parser:flat_sectorfile_parser"
bdeck_parser = "geoips.plugins.modules.trackfile_parsers.bdeck_parser:bdeck_parser"

[project.entry-points."geoips.area_def_generators"]
clat_clon_resolution_shape = "geoips.plugins.modules.area_def_generators.clat_clon_resolution_shape:clat_clon_resolution_shape"

[project.entry-points."geoips.interpolation"]
"pyresample_wrappers.interp_nearest" = "geoips.plugins.modules.interpolation.pyresample_wrappers.interp_nearest:interp_nearest"
"pyresample_wrappers.interp_gauss" = "geoips.plugins.modules.interpolation.pyresample_wrappers.interp_gauss:interp_gauss"
"scipy_wrappers.interp_grid" = "geoips.plugins.modules.interpolation.scipy_wrappers.interp_grid:interp_grid"

[project.entry-points."geoips.user_colormaps"]
cmap_rgb = "geoips.plugins.modules.user_colormaps.cmap_rgb:cmap_rgb"
matplotlib_linear_norm = "geoips.plugins.modules.user_colormaps.matplotlib_linear_norm:matplotlib_linear_norm"
"pmw_tb.cmap_150H" = "geoips.plugins.modules.user_colormaps.pmw_tb.cmap_150H:cmap_150H"
"pmw_tb.cmap_37H_Legacy" = "geoips.plugins.modules.user_colormaps.pmw_tb.cmap_37H_Legacy:cmap_37H_Legacy"
"pmw_tb.cmap_37H_Physical" = "geoips.plugins.modules.user_colormaps.pmw_tb.cmap_37H_Physical:cmap_37H_Physical"
"pmw_tb.cmap_37H" = "geoips.plugins.modules.user_colormaps.pmw_tb.cmap_37H:cmap_37H"
"pmw_tb.cmap_37pct" = "geoips.plugins.modules.user_colormaps.pmw_tb.cmap_37pct:cmap_37pct"
"pmw_tb.cmap_89H_Legacy" = "geoips.plugins.modules.user_colormaps.pmw_tb.cmap_89H_Legacy:cmap_89H_Legacy"
"pmw_tb.cmap_89H_Physical" = "geoips.plugins.modules.user_colormaps.pmw_tb.cmap_89H_Physical:cmap_89H_Physical"
"pmw_tb.cmap_89H" = "geoips.plugins.modules.user_colormaps.pmw_tb.cmap_89H:cmap_89H"
"pmw_tb.cmap_89pct" = "geoips.plugins.modules.user_colormaps.pmw_tb.cmap_89pct:cmap_89pct"
"pmw_tb.cmap_89HW" = "geoips.plugins.modules.user_colormaps.pmw_tb.cmap_89HW:cmap_89HW"
"pmw_tb.cmap_Rain" = "geoips.plugins.modules.user_colormaps.pmw_tb.cmap_Rain:cmap_Rain"
"tpw.tpw_cimss" = "geoips.plugins.modules.user_colormaps.tpw.tpw_cimss:tpw_cimss"
"tpw.tpw_purple" = "geoips.plugins.modules.user_colormaps.tpw.tpw_purple:tpw_purple"
"tpw.tpw_pwat" = "geoips.plugins.modules.user_colormaps.tpw.tpw_pwat:tpw_pwat"
"visir.Infrared" = "geoips.plugins.modules.user_colormaps.visir.Infrared:Infrared"
"visir.IR_BD" = "geoips.plugins.modules.user_colormaps.visir.IR_BD:IR_BD"
"visir.WV" = "geoips.plugins.modules.user_colormaps.visir.WV:WV"
"winds.wind_radii_transitions" = "geoips.plugins.modules.user_colormaps.winds.wind_radii_transitions:wind_radii_transitions"

[project.entry-points."geoips.filename_formats"]
geoips_fname = "geoips.plugins.modules.filename_formats.geoips_fname:geoips_fname"
geoips_netcdf_fname = "geoips.plugins.modules.filename_formats.geoips_netcdf_fname:geoips_netcdf_fname"
geotiff_fname = "geoips.plugins.modules.filename_formats.geotiff_fname:geotiff_fname"
tc_fname = "geoips.plugins.modules.filename_formats.tc_fname:tc_fname"
tc_clean_fname = "geoips.plugins.modules.filename_formats.tc_clean_fname:tc_clean_fname"
text_winds_day_fname = "geoips.plugins.modules.filename_formats.text_winds_day_fname:text_winds_day_fname"
text_winds_full_fname = "geoips.plugins.modules.filename_formats.text_winds_full_fname:text_winds_full_fname"
text_winds_tc_fname = "geoips.plugins.modules.filename_formats.text_winds_tc_fname:text_winds_tc_fname"
metadata_default_fname = "geoips.plugins.modules.filename_formats.metadata_default_fname:metadata_default_fname"

[project.entry-points."geoips.title_formats"]
tc_standard = "geoips.plugins.modules.title_formats.tc_standard:tc_standard"
tc_copyright = "geoips.plugins.modules.title_formats.tc_copyright:tc_copyright"
static_standard = "geoips.plugins.modules.title_formats.static_standard:static_standard"

[project.entry-points."geoips.coverage_checks"]
masked_arrays = "geoips.plugins.modules.coverage_checks.masked_arrays:masked_arrays"
numpy_arrays_nan = "geoips.plugins.modules.coverage_checks.numpy_arrays_nan:numpy_arrays_nan"
center_radius = "geoips.plugins.modules.coverage_checks.center_radius:center_radius"
center_radius_rgba = "geoips.plugins.modules.coverage_checks.center_radius_rgba:center_radius_rgba"
rgba = "geoips.plugins.modules.coverage_checks.rgba:rgba"
windbarbs = "geoips.plugins.modules.coverage_checks.windbarbs:windbarbs"

[project.entry-points."geoips.output_comparisons"]
compare_outputs = "geoips.compare_outputs:compare_outputs"

